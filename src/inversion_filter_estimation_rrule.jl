using Revise
using MacroModelling
import MacroModelling: find_shocks, expand_steady_state, get_and_check_observables, calculate_inversion_filter_loglikelihood, check_bounds, get_NSSS_and_parameters, get_relevant_steady_state_and_state_update, ‚Ñ≥, calculate_second_order_stochastic_steady_state, timings, second_order_auxilliary_matrices, calculate_third_order_stochastic_steady_state
using Random
using BenchmarkTools
import LinearAlgebra as ‚Ñí
# import Optim, LineSearches
import FiniteDifferences
import Zygote
import Zygote: @ignore_derivatives
import Accessors
import ThreadedSparseArrays
import Polyester
using SparseArrays

import ForwardDiff
# import CSV
# using DataFrames
# using Test

using TimerOutputs
TimerOutputs.enable_debug_timings(MacroModelling)

include("../models/Gali_2015_chapter_3_nonlinear.jl")

include("../models/SGU_2003_debt_premium.jl")

include("../models/Smets_Wouters_2007.jl")

include("../models/Ghironi_Melitz_2005.jl")



# @model RBC_baseline begin
# 	c[0] ^ (-œÉ) = Œ≤ * c[1] ^ (-œÉ) * (Œ± * z[1] * (k[0] / l[1]) ^ (Œ± - 1) + 1 - Œ¥)

# 	œà * c[0] ^ œÉ / (1 - l[0]) = z[0] * k[-1] ^ Œ± * l[0] ^ (1 - Œ±) * (1 - Œ±) / l[0]

# 	z[0] * k[-1] ^ Œ± * l[0] ^ (1 - Œ±) = c[0] + k[0] - (1 - Œ¥) * k[-1] + g[0]

# 	# y[0] = z[0] * k[-1] ^ Œ± * l[0] ^ (1 - Œ±)

# 	z[0] = (1 - œÅ·∂ª) + œÅ·∂ª * z[-1] + œÉ·∂ª * œµ·∂ª[x]

# 	g[0] = (1 - œÅ·µç) * gÃÑ + œÅ·µç * g[-1] + œÉ·µç * œµ·µç[x]

# end


# @parameters RBC_baseline begin
# 	œÉ·∂ª = 0.066

# 	œÉ·µç = .104

# 	œÉ = 1

# 	Œ± = 1/3

# 	i_y = 0.25

# 	k_y = 10.4

# 	œÅ·∂ª = 0.97

# 	œÅ·µç = 0.989

# 	g_y = 0.2038

# 	# gÃÑ | gÃÑ = g_y * y[ss]
#     # z[0] * k[-1] ^ Œ± * l[0] ^ (1 - Œ±)
# 	gÃÑ | gÃÑ = g_y * k[ss] ^ Œ± * l[ss] ^ (1 - Œ±)

#     Œ¥ = i_y / k_y

#     Œ≤ = 1 / (Œ± / k_y + (1 - Œ¥))

# 	œà | l[ss] = 1/3
# end
ùìÇ = Ghironi_Melitz_2005
oobbss = [:C, :Q]

ùìÇ = Smets_Wouters_2003
get_variables(ùìÇ)
oobbss = [:L, :W, :R, :pi, :I, :C, :Y]

ùìÇ = Smets_Wouters_2007
oobbss = [:labobs, :dwobs, :robs, :pinfobs, :dinve, :dc, :dy]

ùìÇ = SGU_2003_debt_premium
get_variables(ùìÇ)
oobbss = [:r]

ùìÇ = Gali_2015_chapter_3_nonlinear
oobbss = [:Y, :R, :Pi]
# ùìÇ = RBC_baseline


T = ùìÇ.timings
tol = 1e-12
parameter_values = ùìÇ.parameter_values
parameters = ùìÇ.parameter_values
verbose = false
presample_periods = 0
sylvester_algorithm = :doubling


periods = 10
# speed up solution and filtering
# algorithm = :second_order
algorithm = :pruned_second_order
# algorithm = :third_order
# algorithm = :pruned_third_order
timer = TimerOutput()
rr = rand()
# Random.seed!(9)
data = simulate(ùìÇ, 
                algorithm = algorithm, 
                periods = periods, 
                # parameters = :constebeta => .99 + rr * 1e-5, 
                # parameters = :Œ≤  => .992, 
                timer = timer)(oobbss,:,:simulate)
timer


timer = TimerOutput()
rr = rand()
# Random.seed!(9)
data = simulate(ùìÇ, 
                # algorithm = algorithm, 
                periods = periods, 
                parameters = :constebeta => .99 + rr * 1e-5, 
                # parameters = :Œ≤  => .992, 
                timer = timer)(oobbss,:,:simulate)
timer

timer = TimerOutput()
get_loglikelihood(ùìÇ, data, ùìÇ.parameter_values, algorithm = algorithm, timer = timer)
timer


Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1]

timer = TimerOutput()
# for i in 1:10
zygdiff = Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm, timer = timer), ùìÇ.parameter_values)[1]
# end
timer

@profview for i in 1:3 Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm, timer = timer), ùìÇ.parameter_values)[1] end

using BenchmarkTools
@benchmark get_loglikelihood(ùìÇ, data[:,1:10], ùìÇ.parameter_values, algorithm = algorithm)

@benchmark Zygote.gradient(x-> get_loglikelihood(ùìÇ, data[:,1:10], x, algorithm = algorithm), ùìÇ.parameter_values)[1]

get_parameters(ùìÇ)
# get_parameters(ùìÇ, values = true)


findiff = FiniteDifferences.grad(FiniteDifferences.central_fdm(5,1, max_range = 1e-5), x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1]

# findiff = FiniteDifferences.grad(FiniteDifferences.forward_fdm(5,1, max_range = 1e-3), x-> get_loglikelihood(ùìÇ, data, vcat(x,ùìÇ.parameter_values[2:end]), algorithm = algorithm), ùìÇ.parameter_values[1])[1]

zygdiff = Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1]

isapprox(findiff, zygdiff)
findiff - zygdiff

@benchmark get_loglikelihood(ùìÇ, data, ùìÇ.parameter_values, algorithm = algorithm)

@benchmark Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1]

@benchmark FiniteDifferences.grad(FiniteDifferences.central_fdm(5,1, max_range = 1e-4), x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1]


@profview Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1]

@profview for i in 1:5 Zygote.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)[1] end

@profview for i in 1:50 get_loglikelihood(ùìÇ, data, ùìÇ.parameter_values, algorithm = algorithm) end

# fordiff = ForwardDiff.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)

# @benchmark ForwardDiff.gradient(x-> get_loglikelihood(ùìÇ, data, x, algorithm = algorithm), ùìÇ.parameter_values)



findiff = FiniteDifferences.grad(FiniteDifferences.central_fdm(5,1, max_range = 1e-4), x-> get_loglikelihood(ùìÇ, data(:,[1,2]), x, algorithm = algorithm), ùìÇ.parameter_values)[1]

zygdiff = Zygote.gradient(x-> get_loglikelihood(ùìÇ, data(:,[1]), x, algorithm = algorithm), ùìÇ.parameter_values)[1]

# fordiff = ForwardDiff.gradient(x-> get_loglikelihood(ùìÇ, data([:c],[1,2]), x, algorithm = algorithm), ùìÇ.parameter_values)

isapprox(findiff, zygdiff)

# isapprox(findiff, fordiff)


get_loglikelihood(ùìÇ, data, ùìÇ.parameter_values, algorithm = algorithm)



to = calculate_third_order_stochastic_steady_state(ùìÇ.parameter_values, ùìÇ, pruning = true)

to[7]
to[8]
to[9]
to[10]

# third order
# all_SS + state, converged, SS_and_pars, solution_error, ‚àá‚ÇÅ, ‚àá‚ÇÇ, ‚àá‚ÇÉ, ùêí‚ÇÅ, ùêí‚ÇÇ, ùêí‚ÇÉ
for1 = ForwardDiff.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[1], ùìÇ.parameter_values)
zyg1 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[1], ùìÇ.parameter_values)[1]
fin1 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[1], ùìÇ.parameter_values)[1]
isapprox(zyg1,fin1)
isapprox(for1,fin1)
zyg1-fin1


zyg2 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[3], ùìÇ.parameter_values)[1]
fin2 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[3], ùìÇ.parameter_values)[1]
isapprox(zyg2,fin2)


zyg3 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[5], ùìÇ.parameter_values)[1]
fin3 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[5], ùìÇ.parameter_values)[1]
isapprox(zyg3,fin3)


zyg4 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[6], ùìÇ.parameter_values)[1]
fin4 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[6], ùìÇ.parameter_values)[1]
isapprox(zyg4,fin4)


zyg5 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[7] |> ‚Ñí.norm, ùìÇ.parameter_values)[1]
fin5 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[7] |> ‚Ñí.norm, ùìÇ.parameter_values)[1]
isapprox(zyg5,fin5)


zyg6 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[8] |> ‚Ñí.norm, ùìÇ.parameter_values)[1]
fin6 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[8] |> ‚Ñí.norm, ùìÇ.parameter_values)[1]
isapprox(zyg6,fin6)


zyg7 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[9], ùìÇ.parameter_values)[1]
fin7 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(4,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[9], ùìÇ.parameter_values)[1]
isapprox(zyg7,fin7)

‚Ñí.norm(zyg7 - fin7) / max(‚Ñí.norm(fin7), ‚Ñí.norm(zyg7))

zyg8 = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[10], ùìÇ.parameter_values)[1]
fin8 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(4,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[10], ùìÇ.parameter_values)[1]
isapprox(zyg8,fin8)

‚Ñí.norm(zyg8 - fin8) / max(‚Ñí.norm(fin8), ‚Ñí.norm(zyg8))


full_partial = sparse([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], [1, 1, 2, 2, 3, 3, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 17, 17, 18, 18, 22, 22, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 35, 35, 36, 36], [0.26614015732727614, 0.10704230805268979, -0.009897729836585153, -0.010833679333138708, 0.05236745293389423, -0.2274088222544429, 0.027986427059693342, 0.011256218440323292, 0.003563146282100018, -0.015473177596694056, -0.009897729836585153, -0.010833679333138708, -0.0009129912889280832, 0.0007293406100448242, 0.009305520744558133, 0.005673498279434401, -0.0010408128442920687, -0.001139234227145021, 0.0006331591434441617, 0.0003860318416934748, 0.05236745293389422, -0.2274088222544429, 0.009305520744558133, 0.005673498279434401, 0.0024794853525378253, -0.1882138065031564, 0.005506789792846308, -0.02391356674869773, 0.00016870725079123482, -0.012806300236297242, -0.1289019726996042, 0.09192578414111252, 0.027986427059693342, 0.011256218440323292, -0.0010408128442920687, -0.001139234227145021, 0.005506789792846308, -0.023913566748697733, 0.002942960985043586, 0.001183667055403056, 0.0003746887900287177, -0.00162710866537531, 0.003563146282100018, -0.015473177596694055, 0.0006331591434441617, 0.0003860318416934748, 0.00016870725079123482, -0.012806300236297242, 0.0003746887900287177, -0.0016271086653753101, 1.1479050053836699e-5, -0.0008713565109233175], 3, 36)
full_partial_dense = [0.26614015732727614 -0.009897729836585153 0.05236745293389423 0.0 0.027986427059693342 0.003563146282100018 -0.009897729836585153 -0.0009129912889280832 0.009305520744558133 0.0 -0.0010408128442920687 0.0006331591434441617 0.05236745293389422 0.009305520744558133 0.0024794853525378253 0.0 0.005506789792846308 0.00016870725079123482 0.0 0.0 0.0 -0.1289019726996042 0.0 0.0 0.027986427059693342 -0.0010408128442920687 0.005506789792846308 0.0 0.002942960985043586 0.0003746887900287177 0.003563146282100018 0.0006331591434441617 0.00016870725079123482 0.0 0.0003746887900287177 1.1479050053836699e-5; 0.10704230805268979 -0.010833679333138708 -0.2274088222544429 0.0 0.011256218440323292 -0.015473177596694056 -0.010833679333138708 0.0007293406100448242 0.005673498279434401 0.0 -0.001139234227145021 0.0003860318416934748 -0.2274088222544429 0.005673498279434401 -0.1882138065031564 0.0 -0.02391356674869773 -0.012806300236297242 0.0 0.0 0.0 0.09192578414111252 0.0 0.0 0.011256218440323292 -0.001139234227145021 -0.023913566748697733 0.0 0.001183667055403056 -0.00162710866537531 -0.015473177596694055 0.0003860318416934748 -0.012806300236297242 0.0 -0.0016271086653753101 -0.0008713565109233175; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]

isapprox(full_partial, full_partial_dense)

full = sparse([1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7, 1, 2, 4, 6, 7], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 22, 22, 22, 22, 22, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36], [0.26614015732727614, 0.10704230805268979, 0.2857473207894207, -0.28120376627292276, 0.11143643362717742, -0.009897729836585153, -0.010833679333138708, -0.010741968939938392, 0.014112495481316222, -0.011485288026574848, 0.05236745293389423, -0.2274088222544429, 0.06268210053147728, 0.03534229348582014, -0.2260732549633295, 0.027986427059693342, 0.011256218440323292, 0.03004825213559124, -0.029570466827486267, 0.011718290290421082, 0.003563146282100018, -0.015473177596694056, 0.004264967665028352, 0.0024047333712001323, -0.0153823039459585, -0.009897729836585153, -0.010833679333138708, -0.010741968939938392, 0.014112495481316222, -0.011485288026574848, -0.0009129912889280832, 0.0007293406100448242, -0.0009765787985923954, -0.0006721062196381086, 0.0007916590338529345, 0.009305520744558133, 0.005673498279434401, 0.010191518097445198, 0.025295581283200603, 0.0055604810571578, -0.0010408128442920687, -0.001139234227145021, -0.0011295902626426617, 0.0014840237917663152, -0.0012077552626529665, 0.0006331591434441617, 0.0003860318416934748, 0.0006934434994137965, 0.0017211426440115888, 0.00037834201007465405, 0.05236745293389422, -0.2274088222544429, 0.06268210053147728, 0.03534229348582014, -0.2260732549633295, 0.009305520744558133, 0.005673498279434401, 0.010191518097445198, 0.025295581283200603, 0.0055604810571578, 0.0024794853525378253, -0.1882138065031564, -0.02224326054102648, 0.1400010996455336, -0.211035127697189, 0.005506789792846308, -0.02391356674869773, 0.00659144434304714, 0.0037164798003289537, -0.02377312286773128, 0.00016870725079123482, -0.012806300236297242, -0.0015134589646471769, 0.009525848017118803, -0.014359091162901527, -0.1289019726996042, 0.09192578414111252, -0.13982245556467268, 0.3446155065565036, 0.09525544397057248, 0.027986427059693342, 0.011256218440323292, 0.03004825213559124, -0.029570466827486267, 0.011718290290421082, -0.0010408128442920687, -0.001139234227145021, -0.0011295902626426617, 0.0014840237917663152, -0.0012077552626529665, 0.005506789792846308, -0.023913566748697733, 0.00659144434304714, 0.0037164798003289537, -0.02377312286773128, 0.002942960985043586, 0.001183667055403056, 0.0031597757554110094, -0.0031095334176527534, 0.001232257017395137, 0.0003746887900287177, -0.00162710866537531, 0.0004484900274650646, 0.00025287388332134817, -0.0016175526899693453, 0.003563146282100018, -0.015473177596694055, 0.004264967665028352, 0.0024047333712001323, -0.0153823039459585, 0.0006331591434441617, 0.0003860318416934748, 0.0006934434994137965, 0.0017211426440115888, 0.00037834201007465405, 0.00016870725079123482, -0.012806300236297242, -0.0015134589646471769, 0.009525848017118803, -0.014359091162901527, 0.0003746887900287177, -0.0016271086653753101, 0.0004484900274650646, 0.00025287388332134817, -0.0016175526899693453, 1.1479050053836699e-5, -0.0008713565109233175, -0.00010297762027496294, 0.000648150483639013, -0.0009770103265479397], 13, 36)

deriv = [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0]

s3 = calculate_third_order_stochastic_steady_state(ùìÇ.parameter_values, ùìÇ, pruning = true)[10]





ùìÇ
data
parameter_values
# algorithm = :first_order
# filter = :kalman
# warmup_iterations = 0
# presample_periods = 0
# initial_covariance = :theoretical
filter_algorithm = :LagrangeNewton
# tol = 1e-12
# verbose = false



observables = get_and_check_observables(ùìÇ, data)

solve!(ùìÇ, verbose = verbose, algorithm = algorithm)

NSSS_labels = [sort(union(ùìÇ.exo_present, ùìÇ.var))..., ùìÇ.calibration_equations_parameters...]

obs_indices = convert(Vector{Int}, indexin(observables, NSSS_labels))

TT, SS_and_pars, ùêí, state, solved = get_relevant_steady_state_and_state_update(Val(algorithm), parameter_values, ùìÇ, tol)

if collect(axiskeys(data,1)) isa Vector{String}
    data = rekey(data, 1 => axiskeys(data,1) .|> Meta.parse .|> replace_indices)
end

dt = collect(data(observables))

# prepare data
data_in_deviations = dt .- SS_and_pars[obs_indices]




precision_factor = 1.0

n_obs = size(data_in_deviations,2)

cond_var_idx = indexin(observables,sort(union(T.aux,T.var,T.exo_present)))

shocks¬≤ = 0.0
logabsdets = 0.0

s_in_s‚Å∫ = BitVector(vcat(ones(Bool, T.nPast_not_future_and_mixed), zeros(Bool, T.nExo + 1)))
sv_in_s‚Å∫ = BitVector(vcat(ones(Bool, T.nPast_not_future_and_mixed + 1), zeros(Bool, T.nExo)))
e_in_s‚Å∫ = BitVector(vcat(zeros(Bool, T.nPast_not_future_and_mixed + 1), ones(Bool, T.nExo)))

tmp = ‚Ñí.kron(e_in_s‚Å∫, zero(e_in_s‚Å∫) .+ 1) |> sparse
shock_idxs = tmp.nzind

tmp = ‚Ñí.kron(e_in_s‚Å∫, e_in_s‚Å∫) |> sparse
shock¬≤_idxs = tmp.nzind

shockvar¬≤_idxs = setdiff(shock_idxs, shock¬≤_idxs)

tmp = ‚Ñí.kron(sv_in_s‚Å∫, sv_in_s‚Å∫) |> sparse
var_vol¬≤_idxs = tmp.nzind

tmp = ‚Ñí.kron(s_in_s‚Å∫, s_in_s‚Å∫) |> sparse
var¬≤_idxs = tmp.nzind

ùêí‚Åª¬π  = ùêí[1][T.past_not_future_and_mixed_idx,:]
ùêí‚Åª¬π·µâ = ùêí[1][T.past_not_future_and_mixed_idx,end-T.nExo+1:end]
ùêí¬π‚Åª  = ùêí[1][cond_var_idx, 1:T.nPast_not_future_and_mixed]
ùêí¬π‚Åª·µõ = ùêí[1][cond_var_idx, 1:T.nPast_not_future_and_mixed+1]
ùêí¬π·µâ  = ùêí[1][cond_var_idx,end-T.nExo+1:end]

ùêí¬≤‚Åª·µõ = ùêí[2][cond_var_idx,var_vol¬≤_idxs]
ùêí¬≤‚Åª  = ùêí[2][cond_var_idx,var¬≤_idxs]
ùêí¬≤‚Åª·µâ = ùêí[2][cond_var_idx,shockvar¬≤_idxs]
ùêí¬≤·µâ  = ùêí[2][cond_var_idx,shock¬≤_idxs]
ùêí‚Åª¬≤  = ùêí[2][T.past_not_future_and_mixed_idx,:]

ùêí¬≤‚Åª·µõ    = length(ùêí¬≤‚Åª·µõ.nzval)    / length(ùêí¬≤‚Åª·µõ)  > .1 ? collect(ùêí¬≤‚Åª·µõ)    : ùêí¬≤‚Åª·µõ
ùêí¬≤‚Åª     = length(ùêí¬≤‚Åª.nzval)     / length(ùêí¬≤‚Åª)   > .1 ? collect(ùêí¬≤‚Åª)     : ùêí¬≤‚Åª
ùêí¬≤‚Åª·µâ    = length(ùêí¬≤‚Åª·µâ.nzval)    / length(ùêí¬≤‚Åª·µâ)  > .1 ? collect(ùêí¬≤‚Åª·µâ)    : ùêí¬≤‚Åª·µâ
ùêí¬≤·µâ     = length(ùêí¬≤·µâ.nzval)     / length(ùêí¬≤·µâ)   > .1 ? collect(ùêí¬≤·µâ)     : ùêí¬≤·µâ
ùêí‚Åª¬≤     = length(ùêí‚Åª¬≤.nzval)     / length(ùêí‚Åª¬≤)   > .1 ? collect(ùêí‚Åª¬≤)     : ùêí‚Åª¬≤

tmp = ‚Ñí.kron(sv_in_s‚Å∫, ‚Ñí.kron(sv_in_s‚Å∫, sv_in_s‚Å∫)) |> sparse
var_vol¬≥_idxs = tmp.nzind

tmp = ‚Ñí.kron(‚Ñí.kron(e_in_s‚Å∫, zero(e_in_s‚Å∫) .+ 1), zero(e_in_s‚Å∫) .+ 1) |> sparse
shock_idxs2 = tmp.nzind

tmp = ‚Ñí.kron(‚Ñí.kron(e_in_s‚Å∫, e_in_s‚Å∫), zero(e_in_s‚Å∫) .+ 1) |> sparse
shock_idxs3 = tmp.nzind

tmp = ‚Ñí.kron(e_in_s‚Å∫, ‚Ñí.kron(e_in_s‚Å∫, e_in_s‚Å∫)) |> sparse
shock¬≥_idxs = tmp.nzind

tmp = ‚Ñí.kron(zero(e_in_s‚Å∫) .+ 1, ‚Ñí.kron(e_in_s‚Å∫, e_in_s‚Å∫)) |> sparse
shockvar1_idxs = tmp.nzind

tmp = ‚Ñí.kron(e_in_s‚Å∫, ‚Ñí.kron(zero(e_in_s‚Å∫) .+ 1, e_in_s‚Å∫)) |> sparse
shockvar2_idxs = tmp.nzind

tmp = ‚Ñí.kron(e_in_s‚Å∫, ‚Ñí.kron(e_in_s‚Å∫, zero(e_in_s‚Å∫) .+ 1)) |> sparse
shockvar3_idxs = tmp.nzind

shockvar¬≥2_idxs = setdiff(shock_idxs2, shock¬≥_idxs, shockvar1_idxs, shockvar2_idxs, shockvar3_idxs)

shockvar¬≥_idxs = setdiff(shock_idxs3, shock¬≥_idxs)#, shockvar1_idxs, shockvar2_idxs, shockvar3_idxs)

ùêí¬≥‚Åª·µõ  = ùêí[3][cond_var_idx,var_vol¬≥_idxs]
ùêí¬≥‚Åª·µâ¬≤ = ùêí[3][cond_var_idx,shockvar¬≥2_idxs]
ùêí¬≥‚Åª·µâ  = ùêí[3][cond_var_idx,shockvar¬≥_idxs]
ùêí¬≥·µâ   = ùêí[3][cond_var_idx,shock¬≥_idxs]
ùêí‚Åª¬≥   = ùêí[3][T.past_not_future_and_mixed_idx,:]

ùêí¬≥‚Åª·µõ    = length(ùêí¬≥‚Åª·µõ.nzval)    / length(ùêí¬≥‚Åª·µõ)  > .1 ? collect(ùêí¬≥‚Åª·µõ)    : ùêí¬≥‚Åª·µõ
ùêí¬≥‚Åª·µâ    = length(ùêí¬≥‚Åª·µâ.nzval)    / length(ùêí¬≥‚Åª·µâ)  > .1 ? collect(ùêí¬≥‚Åª·µâ)    : ùêí¬≥‚Åª·µâ
ùêí¬≥·µâ     = length(ùêí¬≥·µâ.nzval)     / length(ùêí¬≥·µâ)   > .1 ? collect(ùêí¬≥·µâ)     : ùêí¬≥·µâ
ùêí‚Åª¬≥     = length(ùêí‚Åª¬≥.nzval)     / length(ùêí‚Åª¬≥)   > .1 ? collect(ùêí‚Åª¬≥)     : ùêí‚Åª¬≥


stt = state[T.past_not_future_and_mixed_idx]

kronxx = [zeros(T.nExo^2) for _ in 1:size(data_in_deviations,2)]

J = ‚Ñí.I(T.nExo)

kronxxx = [zeros(T.nExo^3) for _ in 1:size(data_in_deviations,2)]

kron_buffer2 = ‚Ñí.kron(J, zeros(T.nExo))

kron_buffer3 = ‚Ñí.kron(J, zeros(T.nExo^2))

kron_buffer4 = ‚Ñí.kron(‚Ñí.kron(J, J), zeros(T.nExo))

x = [zeros(T.nExo) for _ in 1:size(data_in_deviations,2)]

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = [zero(ùêí¬≤·µâ) for _ in 1:size(data_in_deviations,2)]

aug_state = [zeros(size(ùêí‚Åª¬π,2)) for _ in 1:size(data_in_deviations,2)]

tmp = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ[1] * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])

jacc = [zero(tmp) for _ in 1:size(data_in_deviations,2)]

Œª = [zeros(size(tmp, 1)) for _ in 1:size(data_in_deviations,2)]

Œª[1] = tmp' \ x[1] * 2

fXŒªp_tmp = [reshape(2 * ùêí‚Å±¬≤·µâ[1]' * Œª[1], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  tmp'
            -tmp  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

fXŒªp = [zero(fXŒªp_tmp) for _ in 1:size(data_in_deviations,2)]

kronxŒª_tmp = ‚Ñí.kron(x[1], Œª[1])

kronxŒª = [kronxŒª_tmp for _ in 1:size(data_in_deviations,2)]

kronxxŒª_tmp = ‚Ñí.kron(x[1], kronxŒª_tmp)

kronxxŒª = [kronxxŒª_tmp for _ in 1:size(data_in_deviations,2)]

II = sparse(‚Ñí.I(T.nExo^2))

lI = 2 * ‚Ñí.I(size(ùêí‚Å±, 2))

ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

for i in axes(data_in_deviations,2)
    state¬π‚Åª = stt

    state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

    ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

    ùêí‚Å±¬≤·µâ[i] = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

    init_guess = zeros(size(ùêí‚Å±, 2))

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kronxxx[i],
                            kron_buffer2,
                            kron_buffer3,
                            kron_buffer4,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ[i],
                            ùêí‚Å±¬≥·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ[i] * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), kronxx[i])

    Œª[i] = jacc[i]' \ x[i] * 2
    # ‚Ñí.ldiv!(Œª[i], tmp', x[i])
    # ‚Ñí.rmul!(Œª[i], 2)
    fXŒªp[i] = [reshape((2 * ùêí‚Å±¬≤·µâ[i] + 6 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(II, x[i]))' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - lI  jacc[i]'
                -jacc[i]  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

    ‚Ñí.kron!(kronxx[i], x[i], x[i])

    ‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

    ‚Ñí.kron!(kronxxŒª[i], x[i], kronxŒª[i])

    ‚Ñí.kron!(kronxxx[i], x[i], kronxx[i])

    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state[i] = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
end

# See: https://pcubaborda.net/documents/CGIZ-final.pdf
llh = -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2



‚àÇllh = 1

‚àÇstate = similar(state)

‚àÇùêí = copy(ùêí)

‚àÇdata_in_deviations = similar(data_in_deviations)

‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí¬≤·µâ = zero(ùêí¬≤·µâ)
‚àÇùêí‚Å±¬≥·µâ = zero(ùêí‚Å±¬≥·µâ)

‚àÇùêí¬π·µâ = zero(ùêí¬π·µâ)
‚àÇùêí¬≤‚Åª·µâ = zero(ùêí¬≤‚Åª·µâ)
‚àÇùêí¬≥‚Åª·µâ = zero(ùêí¬≥‚Åª·µâ)
‚àÇùêí¬≥‚Åª·µâ¬≤ = zero(ùêí¬≥‚Åª·µâ¬≤)

‚àÇùêí¬π‚Åª·µõ = zero(ùêí¬π‚Åª·µõ)
‚àÇùêí¬≤‚Åª·µõ = zero(ùêí¬≤‚Åª·µõ)
‚àÇùêí¬≥‚Åª·µõ = zero(ùêí¬≥‚Åª·µõ)

‚àÇùêí‚Åª¬π = zero(ùêí‚Åª¬π)
‚àÇùêí‚Åª¬≤ = zero(ùêí‚Åª¬≤)
‚àÇùêí‚Åª¬≥ = zero(ùêí‚Åª¬≥)

‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇx = zero(x[1])
‚àÇkronxx = zero(kronxx[1])
‚àÇstate = zeros(T.nPast_not_future_and_mixed)
‚àÇkronstate¬π‚Åª_vol = zeros(length(state¬π‚Åª_vol)^2)

n_end = 3 # size(data_in_deviations, 2)

for i in 3:-1:1 # reverse(axes(data_in_deviations,2))
    ‚àÇkronstate¬π‚Åª_vol *= 0

    # stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
    ‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
    ‚àÇkronaug_state = ùêí‚Åª¬≤' * ‚àÇstate / 2
    ‚àÇkronkronaug_state = ùêí‚Åª¬≥' * ‚àÇstate / 6

    re‚àÇkronkronaug_state = reshape(‚àÇkronkronaug_state, 
                                    length(aug_state[i]), 
                                    length(aug_state[i])^2)

    ei = 1
    for e in eachslice(re‚àÇkronkronaug_state; dims = (1))
        ‚àÇaug_state[ei] += ‚Ñí.dot(‚Ñí.kron(aug_state[i], aug_state[i]),e)
        ei += 1
    end
    
    ei = 1
    for e in eachslice(re‚àÇkronkronaug_state; dims = (2))
        ‚àÇkronaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                            length(aug_state[i]), 
                            length(aug_state[i]))

    ei = 1
    for e in eachslice(re‚àÇkronaug_state; dims = (1))
        ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronaug_state; dims = (2))
        ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    if i > 1 && i < n_end # size(data_in_deviations,2)
        ‚àÇstate *= 0
    end

    # aug_state[i] = [stt; 1; x[i]]
    ‚àÇstate += ‚àÇaug_state[1:length(‚àÇstate)]

    # aug_state[i] = [stt; 1; x[i]]
    ‚àÇx = ‚àÇaug_state[T.nPast_not_future_and_mixed+2:end]

    # shocks¬≤ += sum(abs2,x[i])
    if i < n_end # size(data_in_deviations,2)
        ‚àÇx -= copy(x[i])
    else
        ‚àÇx += copy(x[i])
    end

    # logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    ‚àÇjacc = inv(jacc[i])'

    # jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ[i] * ‚Ñí.kron(‚Ñí.I(T.nExo), x) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x, x))
    ‚àÇùêí‚Å± = -‚àÇjacc / 2 # fine

    ‚àÇkronIx = ùêí‚Å±¬≤·µâ[i]' * ‚àÇjacc

    re‚àÇkronIx = reshape(‚àÇkronIx, 
                            T.nExo, 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIx; dims = (1,3))
        if i < n_end # size(data_in_deviations,2)
            ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        else
            ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        end
        ei += 1
    end

    ‚àÇùêí‚Å±¬≤·µâ = -‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

    ‚àÇkronIxx = ùêí‚Å±¬≥·µâ' * ‚àÇjacc * 3 / 2
    
    re‚àÇkronIxx = reshape(‚àÇkronIxx, 
                            T.nExo^2, 
                            T.nExo, 
                            1,
                            T.nExo)
          
    ‚àÇkronxx *= 0

    ei = 1
    for e in eachslice(re‚àÇkronIxx; dims = (1,3))
        if i < n_end # size(data_in_deviations,2)
            ‚àÇkronxx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        else
            ‚àÇkronxx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        end
        ei += 1
    end

    re‚àÇkronxx = reshape(‚àÇkronxx, 
                            T.nExo, 
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronxx; dims = (2))
        ‚àÇx[ei] += ‚Ñí.dot(x[i],e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronxx; dims = (1))
        ‚àÇx[ei] += ‚Ñí.dot(x[i],e)
        ei += 1
    end

    # find_shocks
    ‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

    S = fXŒªp[i]' \ ‚àÇxŒª

    if i < n_end # size(data_in_deviations,2)
        S *= -1
    end

    ‚àÇshock_independent = S[T.nExo+1:end] # fine

    ‚àÇùêí‚Å± += S[1:T.nExo] * Œª[i]' - S[T.nExo + 1:end] * x[i]' # fine

    ‚àÇùêí‚Å±¬≤·µâ += 2 * S[1:T.nExo] * kronxŒª[i]' - S[T.nExo + 1:end] * kronxx[i]'

    # ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2
    state¬π‚Åª_vol = [aug_state[i][1:T.nPast_not_future_and_mixed];1] # define here as it is used multiple times later

    ‚àÇstate¬π‚Åª_vol *= 0

    ‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

    re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        ei += 1
    end

    ‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol = ùêí¬≥‚Åª·µâ¬≤' * ‚àÇùêí‚Å± / 2

    re‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol)^2, 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇkronstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e) # ‚àÇkronstate¬π‚Åª_vol is dealt with later
        ei += 1
    end

    # ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2
    ‚àÇkronIIstate¬π‚Åª_vol = ùêí¬≥‚Åª·µâ' * ‚àÇùêí‚Å±¬≤·µâ / 2

    re‚àÇkronIIstate¬π‚Åª_vol = reshape(‚àÇkronIIstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            T.nExo^2, 
                            1,
                            T.nExo^2)

    ei = 1
    for e in eachslice(re‚àÇkronIIstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(II,e)
        ei += 1
    end


    # shock_independent = copy(data_in_deviations[:,i])
    ‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

    # ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    ‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent # fine

    # ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
    ‚àÇkronstate¬π‚Åª_vol -= ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

    # ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   
    ‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol = -ùêí¬≥‚Åª·µõ' * ‚àÇshock_independent / 6

    re‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            length(state¬π‚Åª_vol)^2)
                    
    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol; dims = (2))
        ‚àÇkronstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol; dims = (1))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol),e) # fine
        ei += 1
    end        

    re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, # fine
                            length(state¬π‚Åª_vol), 
                            length(state¬π‚Åª_vol))

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e) # fine
        ei += 1
    end

    # state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    ‚àÇstate += ‚àÇstate¬π‚Åª_vol[1:end-1]
end

‚àÇùêí = [copy(ùêí[1]) * 0, copy(ùêí[2]) * 0, copy(ùêí[3]) * 0]

‚àÇùêí[1][cond_var_idx,end-T.nExo+1:end] += ‚àÇùêí¬π·µâ
‚àÇùêí[2][cond_var_idx,shockvar¬≤_idxs] += ‚àÇùêí¬≤‚Åª·µâ
‚àÇùêí[2][cond_var_idx,shock¬≤_idxs] += ‚àÇùêí¬≤·µâ
‚àÇùêí[3][cond_var_idx,shockvar¬≥2_idxs] += ‚àÇùêí¬≥‚Åª·µâ¬≤
‚àÇùêí[3][cond_var_idx,shockvar¬≥_idxs] += ‚àÇùêí¬≥‚Åª·µâ
‚àÇùêí[3][cond_var_idx,shock¬≥_idxs] += ‚àÇùêí‚Å±¬≥·µâ / 6 # ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

‚àÇùêí[1][cond_var_idx, 1:T.nPast_not_future_and_mixed+1] += ‚àÇùêí¬π‚Åª·µõ
‚àÇùêí[2][cond_var_idx,var_vol¬≤_idxs] += ‚àÇùêí¬≤‚Åª·µõ
‚àÇùêí[3][cond_var_idx,var_vol¬≥_idxs] += ‚àÇùêí¬≥‚Åª·µõ

‚àÇùêí[1][T.past_not_future_and_mixed_idx,:] += ‚àÇùêí‚Åª¬π
‚àÇùêí[2][T.past_not_future_and_mixed_idx,:] += ‚àÇùêí‚Åª¬≤
‚àÇùêí[3][T.past_not_future_and_mixed_idx,:] += ‚àÇùêí‚Åª¬≥

‚àÇùêí[1] *= ‚àÇllh
‚àÇùêí[2] *= ‚àÇllh
‚àÇùêí[3] *= ‚àÇllh




findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1, max_range = 1e-6), 
                X -> begin
                    # stt = copy(state[T.past_not_future_and_mixed_idx])
                    stt = X
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    # dtt = copy(data_in_deviations)
                    # dtt = copy(data_in_deviations[:,[1]])
                    # dtt[:,1] = X[:,1]
                    # dtt = X

                    ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

                    for i in 1:2# axes(data_in_deviations,2)
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(data_in_deviations[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state[i] = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
                    end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                copy(state[T.past_not_future_and_mixed_idx]))[1]'


# check where it breaks




findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1, max_range = 1e-6), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                    # stt = X
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    # dtt = copy(data_in_deviations)
                    # dtt = copy(data_in_deviations[:,[1]])
                    # dtt[:,1] = X[:,1]
                    dtt = X

                    ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

                    for i in 1:3# axes(data_in_deviations,2)
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(dtt[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state[i] = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
                    end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                # copy(state[T.past_not_future_and_mixed_idx]))[1]'
                copy(data_in_deviations[:,[1,2,3]]))[1]'

findiff




# sequential instead of loop

findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1, max_range = 1e-6), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                    # stt = X
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    # dtt = copy(data_in_deviations[:,[1]])
                    # dtt[:,1] = X[:,1]
                    # dtt = X

                    ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

                    # for i in 1:2# axes(data_in_deviations,2)
                    i = 1
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        # shock_independent = copy(dtt[:,i])
                        shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state[i] = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6

                        
                    # for i in 1:2# axes(data_in_deviations,2)
                    i = 2
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(dtt[:,i])
                        # shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state[i] = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6

                    # for i in 1:2# axes(data_in_deviations,2)
                        i = 3
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(dtt[:,i])
                        # shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state[i] = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
                    # end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                # copy(state[T.past_not_future_and_mixed_idx]))[1]'
                copy(data_in_deviations[:,[1]]))[1]'


# check where it breaks across iterations

findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1, max_range = 1e-6), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                    # stt = X
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    # dtt = copy(data_in_deviations[:,[1]])
                    # dtt[:,1] = X[:,1]
                    # dtt = X

                    ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

                    # for i in 1:2# axes(data_in_deviations,2)
                    i = 1
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(dtt[:,i])
                        # shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        # jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))
                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(X, X))
                        # jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), X) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))
                        # jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), X) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(X, X))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                            # shocks¬≤ += sum(abs2,X)
                        end

                        aug_state[i] = [stt; 1; x[i]]
                        # aug_state[i] = [stt; 1; X]
                        # aug_state[i] = [X; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
                        # stt = ùêí‚Åª¬π * X + ùêí‚Åª¬≤ * ‚Ñí.kron(X, X) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(X,X),X) / 6

                        
                    # for i in 1:2# axes(data_in_deviations,2)
                    i = 2
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(dtt[:,i])
                        # shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state[i] = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
                    # end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                # copy(state[T.past_not_future_and_mixed_idx]))[1]'
                copy(x[1]))[1]'








stt = state[T.past_not_future_and_mixed_idx]

kronxx = [zeros(T.nExo^2) for _ in 1:size(data_in_deviations,2)]

J = ‚Ñí.I(T.nExo)

kronxxx = [zeros(T.nExo^3) for _ in 1:size(data_in_deviations,2)]

kron_buffer2 = ‚Ñí.kron(J, zeros(T.nExo))

kron_buffer3 = ‚Ñí.kron(J, zeros(T.nExo^2))

kron_buffer4 = ‚Ñí.kron(‚Ñí.kron(J, J), zeros(T.nExo))

x = [zeros(T.nExo) for _ in 1:size(data_in_deviations,2)]

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = [zero(ùêí¬≤·µâ) for _ in 1:size(data_in_deviations,2)]

aug_state = [zeros(size(ùêí‚Åª¬π,2)) for _ in 1:size(data_in_deviations,2)]

tmp = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ[1] * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])

jacc = [zero(tmp) for _ in 1:size(data_in_deviations,2)]

Œª = [zeros(size(tmp, 1)) for _ in 1:size(data_in_deviations,2)]

Œª[1] = tmp' \ x[1] * 2

fXŒªp_tmp = [reshape(2 * ùêí‚Å±¬≤·µâ[1]' * Œª[1], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  tmp'
            -tmp  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

fXŒªp = [zero(fXŒªp_tmp) for _ in 1:size(data_in_deviations,2)]

kronxŒª_tmp = ‚Ñí.kron(x[1], Œª[1])

kronxŒª = [kronxŒª_tmp for _ in 1:size(data_in_deviations,2)]

kronxxŒª_tmp = ‚Ñí.kron(x[1], kronxŒª_tmp)

kronxxŒª = [kronxxŒª_tmp for _ in 1:size(data_in_deviations,2)]

II = sparse(‚Ñí.I(T.nExo^2))

lI = 2 * ‚Ñí.I(size(ùêí‚Å±, 2))

ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

for i in axes(data_in_deviations,2)
    state¬π‚Åª = stt

    state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

    ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

    ùêí‚Å±¬≤·µâ[i] = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

    init_guess = zeros(size(ùêí‚Å±, 2))

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kronxxx[i],
                            kron_buffer2,
                            kron_buffer3,
                            kron_buffer4,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ[i],
                            ùêí‚Å±¬≥·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    if !matched println("failed to find shocks") end
        
    ‚Ñí.kron!(kronxx[i], x[i], x[i])

    ‚Ñí.kron!(kronxxx[i], x[i], kronxx[i])

    jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ[i] * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), kronxx[i])

    Œª[i] = jacc[i]' \ x[i] * 2
    # ‚Ñí.ldiv!(Œª[i], tmp', x[i])
    # ‚Ñí.rmul!(Œª[i], 2)
    fXŒªp[i] = [reshape((2 * ùêí‚Å±¬≤·µâ[i] + 6 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(II, x[i]))' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - lI  jacc[i]'
                -jacc[i]  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

    ‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

    ‚Ñí.kron!(kronxxŒª[i], x[i], kronxŒª[i])
            
    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state[i] = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
end







‚àÇllh = 1

‚àÇstate = similar(state)

‚àÇùêí = copy(ùêí)

‚àÇdata_in_deviations = similar(data_in_deviations)

‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí¬≤·µâ = zero(ùêí¬≤·µâ)
‚àÇùêí‚Å±¬≥·µâ = zero(ùêí‚Å±¬≥·µâ)

‚àÇùêí¬π·µâ = zero(ùêí¬π·µâ)
‚àÇùêí¬≤‚Åª·µâ = zero(ùêí¬≤‚Åª·µâ)
‚àÇùêí¬≥‚Åª·µâ = zero(ùêí¬≥‚Åª·µâ)
‚àÇùêí¬≥‚Åª·µâ¬≤ = zero(ùêí¬≥‚Åª·µâ¬≤)

‚àÇùêí¬π‚Åª·µõ = zero(ùêí¬π‚Åª·µõ)
‚àÇùêí¬≤‚Åª·µõ = zero(ùêí¬≤‚Åª·µõ)
‚àÇùêí¬≥‚Åª·µõ = zero(ùêí¬≥‚Åª·µõ)

‚àÇùêí‚Åª¬π = zero(ùêí‚Åª¬π)
‚àÇùêí‚Åª¬≤ = zero(ùêí‚Åª¬≤)
‚àÇùêí‚Åª¬≥ = zero(ùêí‚Åª¬≥)

‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇx = zero(x[1])
‚àÇkronxx = zero(kronxx[1])
‚àÇstate = zeros(T.nPast_not_future_and_mixed)
‚àÇkronstate¬π‚Åª_vol = zeros(length(state¬π‚Åª_vol)^2)

n_end = 1

i = 1
    ‚àÇkronstate¬π‚Åª_vol *= 0

    # stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
    ‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
    ‚àÇkronaug_state = ùêí‚Åª¬≤' * ‚àÇstate / 2
    ‚àÇkronkronaug_state = ùêí‚Åª¬≥' * ‚àÇstate / 6

    re‚àÇkronkronaug_state = reshape(‚àÇkronkronaug_state, 
                                    length(aug_state[i]), 
                                    length(aug_state[i])^2)

    ei = 1
    for e in eachslice(re‚àÇkronkronaug_state; dims = (1))
        ‚àÇaug_state[ei] += ‚Ñí.dot(‚Ñí.kron(aug_state[i], aug_state[i]),e)
        ei += 1
    end
    
    ei = 1
    for e in eachslice(re‚àÇkronkronaug_state; dims = (2))
        ‚àÇkronaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                            length(aug_state[i]), 
                            length(aug_state[i]))

    ei = 1
    for e in eachslice(re‚àÇkronaug_state; dims = (1))
        ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronaug_state; dims = (2))
        ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    if i > 1 && i < n_end # size(data_in_deviations,2)
        ‚àÇstate *= 0
    end

    # aug_state[i] = [stt; 1; x[i]]
    ‚àÇstate += ‚àÇaug_state[1:length(‚àÇstate)]

    # aug_state[i] = [stt; 1; x[i]]
    ‚àÇx = ‚àÇaug_state[T.nPast_not_future_and_mixed+2:end]

    # shocks¬≤ += sum(abs2,x[i])
    if i < n_end # size(data_in_deviations,2)
        ‚àÇx -= copy(x[i])
    else
        ‚àÇx += copy(x[i])
    end

    # logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    ‚àÇjacc = inv(‚Ñí.svd(jacc[i]))'

    # jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ[i] * ‚Ñí.kron(‚Ñí.I(T.nExo), x) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x, x))
    # ‚àÇùêí‚Å± = -‚àÇjacc / 2 # fine

    ‚àÇkronIx = ùêí‚Å±¬≤·µâ[i]' * ‚àÇjacc

    re‚àÇkronIx = reshape(‚àÇkronIx, 
                            T.nExo, 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIx; dims = (1,3))
        if i < n_end # size(data_in_deviations,2)
            ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        else
            ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        end
        ei += 1
    end

    ‚àÇùêí‚Å±¬≤·µâ = -‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

    ‚àÇkronIxx = ùêí‚Å±¬≥·µâ' * ‚àÇjacc * 3 / 2
    
    re‚àÇkronIxx = reshape(‚àÇkronIxx, 
                            T.nExo^2, 
                            T.nExo, 
                            1,
                            T.nExo)
          
    ‚àÇkronxx *= 0

    ei = 1
    for e in eachslice(re‚àÇkronIxx; dims = (1,3))
        if i < n_end # size(data_in_deviations,2)
            ‚àÇkronxx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        else
            ‚àÇkronxx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        end
        ei += 1
    end

    re‚àÇkronxx = reshape(‚àÇkronxx, 
                            T.nExo, 
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronxx; dims = (2))
        ‚àÇx[ei] += ‚Ñí.dot(x[i],e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronxx; dims = (1))
        ‚àÇx[ei] += ‚Ñí.dot(x[i],e)
        ei += 1
    end

    # find_shocks
    # Œª = tmp' \ x * 2

    ‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

    S = fXŒªp[i]' \ ‚àÇxŒª

    if i < n_end # size(data_in_deviations,2)
        S *= -1
    end

    ‚àÇshock_independent = S[T.nExo+1:end] # fine

    copyto!(‚àÇùêí‚Å±, ‚Ñí.kron(S[1:T.nExo], Œª[i]) - ‚Ñí.kron(x[i], S[T.nExo+1:end]))
    ‚àÇùêí‚Å± -= ‚àÇjacc / 2 # fine

    # ‚àÇùêí‚Å± += S[1:T.nExo] * Œª[i]' - S[T.nExo + 1:end] * x[i]' # fine
    ‚Ñí.kron(x[i],Œª[i])
    ‚àÇùêí‚Å±¬≤·µâ += reshape(2 * ‚Ñí.kron(S[1:T.nExo], ‚Ñí.kron(x[i],Œª[i])) - ‚Ñí.kron(kronxx[i], S[T.nExo+1:end]), size(‚àÇùêí‚Å±¬≤·µâ))
    # ‚àÇùêí‚Å±¬≤·µâ += 2 * S[1:T.nExo] * kronxŒª[i]' - S[T.nExo + 1:end] * kronxx[i]'

    # ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2
    state¬π‚Åª_vol = [aug_state[i][1:T.nPast_not_future_and_mixed];1] # define here as it is used multiple times later

    ‚àÇstate¬π‚Åª_vol *= 0

    ‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

    re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        ei += 1
    end

    ‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol = ùêí¬≥‚Åª·µâ¬≤' * ‚àÇùêí‚Å± / 2

    re‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol)^2, 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIstate¬π‚Åª_volstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇkronstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e) # ‚àÇkronstate¬π‚Åª_vol is dealt with later
        ei += 1
    end

    # ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2
    ‚àÇkronIIstate¬π‚Åª_vol = ùêí¬≥‚Åª·µâ' * ‚àÇùêí‚Å±¬≤·µâ / 2

    re‚àÇkronIIstate¬π‚Åª_vol = reshape(‚àÇkronIIstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            T.nExo^2, 
                            1,
                            T.nExo^2)

    ei = 1
    for e in eachslice(re‚àÇkronIIstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(II,e)
        ei += 1
    end


    # shock_independent = copy(data_in_deviations[:,i])
    ‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

    # ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    ‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent # fine

    # ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
    ‚àÇkronstate¬π‚Åª_vol -= ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

    # ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   
    ‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol = -ùêí¬≥‚Åª·µõ' * ‚àÇshock_independent / 6

    re‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            length(state¬π‚Åª_vol)^2)
                    
    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol; dims = (2))
        ‚àÇkronstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_volstate¬π‚Åª_vol; dims = (1))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol),e) # fine
        ei += 1
    end        

    re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, # fine
                            length(state¬π‚Åª_vol), 
                            length(state¬π‚Åª_vol))

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e) # fine
        ei += 1
    end

    # state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    ‚àÇstate += ‚àÇstate¬π‚Åª_vol[1:end-1]
# end


stt = copy(state[T.past_not_future_and_mixed_idx])

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

dtt = copy(data_in_deviations)

shock_independent = copy(dtt[:,i])
# shock_independent = copy(X[:,i])

‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)

‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1, max_range = 1e-6), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                    # stt = X
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    # dtt = copy(data_in_deviations[:,[1]])
                    # dtt[:,1] = X[:,1]
                    # dtt = X

                    ùêí‚Å±¬≥·µâ = ùêí¬≥·µâ / 6

                    # for i in 1:2# axes(data_in_deviations,2)
                    i = 1
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(dtt[:,i])
                        # shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ‚Ñí.mul!(shock_independent, ùêí¬≥‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol)), -1/6, 1)   

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol) + ùêí¬≥‚Åª·µâ¬≤ * ‚Ñí.kron(‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol), state¬π‚Åª_vol) / 2

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 + ùêí¬≥‚Åª·µâ * ‚Ñí.kron(II, state¬π‚Åª_vol) / 2

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kronxxx[i],
                                                kron_buffer2,
                                                kron_buffer3,
                                                kron_buffer4,
                                                J,
                                                ùêí‚Å±,
                                                X,
                                                ùêí‚Å±¬≥·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )
# return x[i]
                        jacc[i] =  ùêí‚Å± + 2 * X * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))
                        # jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i]) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(X, X))
                        # jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), X) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(x[i], x[i]))
                        # jacc[i] =  ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), X) + 3 * ùêí‚Å±¬≥·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), ‚Ñí.kron(X, X))

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                                # logabsdets += ‚Ñí.logabsdet(X)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                                # logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(X))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                            # shocks¬≤ += sum(abs2,X)
                        end

                        aug_state[i] = [stt; 1; x[i]]
                        # aug_state[i] = [stt; 1; X]
                        # aug_state[i] = [X; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(aug_state[i],aug_state[i]),aug_state[i]) / 6
                        # stt = ùêí‚Åª¬π * X + ùêí‚Åª¬≤ * ‚Ñí.kron(X, X) / 2 + ùêí‚Åª¬≥ * ‚Ñí.kron(‚Ñí.kron(X,X),X) / 6

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                # copy(state[T.past_not_future_and_mixed_idx]))[1]'
                # copy(state[T.past_not_future_and_mixed_idx]))[1]'
                copy(ùêí‚Å±¬≤·µâ))[1]'

                jacc[i]



# -(logabsdets + shocks¬≤ + (length(observables) * (warmup_iterations + n_obs - presample_periods)) * log(2 * 3.141592653589793)) / 2

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])

# jacc' \ x[1]

‚àÇstate = similar(state)

‚àÇùêí = copy(ùêí)

‚àÇdata_in_deviations = similar(data_in_deviations)

‚àÇllh = 1



# shocks¬≤ += sum(abs2,x[i])
‚àÇx = copy(x[1])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc')

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[1]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end


fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[1], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
-jacc  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

init_guess = zeros(size(ùêí‚Å±, 2))

‚àÇshock_independent = similar(data_in_deviations[:,1])

‚àÇxŒª = vcat(‚àÇx, zero(Œª[1]))

S = -fXŒªp' \ ‚àÇxŒª

copyto!(‚àÇshock_independent, S[length(init_guess)+1:end])

# ‚àÇùêí‚Å± = similar(ùêí‚Å±)

# ‚àÇùêí‚Å±¬≤·µâ = similar(ùêí‚Å±¬≤·µâ)


# copyto!(‚àÇùêí‚Å±, ‚Ñí.kron(S[1:length(init_guess)], Œª[1]) - ‚Ñí.kron(x[1], S[length(init_guess)+1:end]))

# copyto!(‚àÇùêí‚Å±¬≤·µâ, 2 * ‚Ñí.kron(S[1:length(init_guess)], kronxŒª[1]) - ‚Ñí.kron(kronxx[1], S[length(init_guess)+1:end]))


# shock_independent = data_in_deviations[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)
‚àÇdata_in_deviations[:,1] = -‚àÇshock_independent'



‚àÇx = copy(x[1])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[2])), x[1])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc')

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[1]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end


fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[1], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
-jacc  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

‚àÇshock_independent = similar(data_in_deviations[:,1])

‚àÇxŒª = vcat(‚àÇx, zero(Œª[1]))

S = -fXŒªp' \ ‚àÇxŒª

copyto!(‚àÇshock_independent, S[length(init_guess)+1:end])

‚àÇx = ‚àÇshock_independent


ùêí‚Åª¬π·µâ * ‚àÇx

ùêí‚Åª¬π[:,end-T.nExo+1:end] * ‚àÇx
aug_state = [stt; 1; x[1]]

‚àÇaug_state = zero(aug_state)

‚àÇaug_state[end-T.nExo+1:end] = ‚àÇx

‚àÇstate = ùêí‚Åª¬π * ‚àÇaug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(‚àÇaug_state, aug_state)

‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇstate¬π‚Åª_vol[1:T.nPast_not_future_and_mixed] = ‚àÇstate

‚àÇshock_independent = ùêí¬π‚Åª·µõ * ‚àÇstate¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(‚àÇstate¬π‚Åª_vol, state¬π‚Åª_vol)



stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
# Zygote.gradient(x->sum(abs2,x), ones(5) .+1.3)

# Zygote.gradient(x->‚Ñí.logabsdet(x)[1], jacc)[1]
# inv(jacc)'

findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), x -> calculate_inversion_filter_loglikelihood(Val(:second_order),
                                                    state, 
                                                    ùêí, 
                                                    x, 
                                                    observables,
                                                    T), data_in_deviations[:,1:2])[1]



findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), x -> calculate_inversion_filter_loglikelihood(Val(:second_order),
                                                    state, 
                                                    ùêí, 
                                                    x, 
                                                    observables,
                                                    T), data_in_deviations[:,[1]])[1]





findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    dtt[:,1] = X[:,1]

                    # dt = X

                    for i in 1:2#axes(data_in_deviations,2)
                        state¬π‚Åª = stt

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        # shock_independent = copy(data_in_deviations[:,i])
                        shock_independent = copy(dtt[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                        init_guess = zeros(size(ùêí‚Å±, 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
                    end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
data_in_deviations[:,[1]])[1]




‚àÇshock_independent = zero(data_in_deviations[:,1])

‚àÇùêí‚Å± = zero(ùêí‚Å±)

‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)

‚àÇstate = zero(state)

‚àÇaug_state = zero(aug_state)


aug_state
state¬π‚Åª_vol

i = 2
‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc')

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
-jacc  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent += S[length(init_guess)+1:end]

copyto!(‚àÇùêí‚Å±, ‚Ñí.kron(S[1:length(init_guess)], Œª[i]) - ‚Ñí.kron(x[i], S[length(init_guess)+1:end]))
        
copyto!(‚àÇùêí‚Å±¬≤·µâ, 2 * ‚Ñí.kron(S[1:length(init_guess)], kronxŒª[i]) - ‚Ñí.kron(kronxx[i], S[length(init_guess)+1:end]))

state¬π‚Åª_vol = [stt
                1]

‚àÇstate¬π‚Åª_vol = ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

‚àÇkronstate¬π‚Åª_vol = ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, size(state¬π‚Åª_vol,1), size(state¬π‚Åª_vol,1), size(state¬π‚Åª_vol,2), size(state¬π‚Åª_vol,2))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2,4))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:length(‚àÇstate¬π‚Åª_vol)-1]

‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate

‚àÇkronaug_state = ùêí‚Åª¬≤' * ‚àÇstate

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, size(‚àÇaug_state,1), size(‚àÇaug_state,1), size(‚àÇaug_state,2), size(‚àÇaug_state,2))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1,3))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2,4))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

‚àÇx += ‚àÇaug_state[length(‚àÇstate)+2:end]


i = 1

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
-jacc  zeros(size(ùêí‚Å±, 1),size(ùêí‚Å±, 1))]

‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent += S[length(init_guess)+1:end]



















findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    dtt[:,1] = X[:,1]

                    i = 1
                    # for i in 1:2#axes(data_in_deviations,2)
                        state¬π‚Åª_vol = vcat(stt, 1)
                        
                        shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

                        jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                        if i > presample_periods
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        aug_state = [stt; 1; x[i]]

                        stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
                    # end
                    
                        i = 2
                        
                        state¬π‚Åª_vol = vcat(stt, 1)
                            
                        shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

                        ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                        ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

                        jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                        if i > presample_periods
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
data_in_deviations[:,[1]])[1]









stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)
    
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)

    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

    if i > presample_periods
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
# end

    i = 2
    
    state¬π‚Åª_vol = vcat(stt, 1)
        
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)


findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                        jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), X)

                        if i > presample_periods
                            if T.nExo == length(observables)
                                logabsdets = ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                            else
                                logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                            end

                            shocks¬≤ = sum(abs2,X)
                        end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
x[2])[1]




‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc')

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end



###################



stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)
    
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)

    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

    if i > presample_periods
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
# end

    i = 2
    
    state¬π‚Åª_vol = vcat(stt, 1)
        
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 






findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                X)

                        jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                        if i > presample_periods
                            if T.nExo == length(observables)
                                logabsdets = ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                            else
                                logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                            end

                            shocks¬≤ = sum(abs2,x[i])
                        end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                shock_independent)[1]




x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]

‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = -S[length(init_guess)+1:end]'





###################



stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)
    
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)

    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

    if i > presample_periods
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
# end

    i = 2
    
    state¬π‚Åª_vol = vcat(stt, 1)
        
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 






findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(5,1, max_range = 1e-6), 
                X -> begin
                        yy, matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                zero(kronxx[i]),
                                                zero(kron_buffer2),
                                                J,
                                                ùêí‚Å±,
                                                X,
                                                shock_independent)

                        jacc = ùêí‚Å± + 2 * X * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

                        # if i > presample_periods
                            if T.nExo == length(observables)
                                logabsdets = ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                            else
                                logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                            end

                            shocks¬≤ = sum(abs2,yy)
                        # end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                ùêí‚Å±¬≤·µâ)[1]'





x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# ‚àÇx *= 0
# ‚àÇx[3] = 1
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]'

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

‚àÇùêí‚Å± = ‚Ñí.kron(S[1:length(init_guess)], Œª[i]) - ‚Ñí.kron(x[i], S[length(init_guess)+1:end])
‚àÇùêí‚Å± -= vec(‚àÇjacc)/2

‚àÇùêí‚Å±¬≤·µâ = 2 * ‚Ñí.kron(S[1:length(init_guess)], kronxŒª[i]) - ‚Ñí.kron(kronxx[i], S[length(init_guess)+1:end])
‚àÇùêí‚Å±¬≤·µâ -= vec(‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])')





###################



stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)
    
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)

    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

    if i > presample_periods
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
# end

    i = 2
    
    state¬π‚Åª_vol = vcat(stt, 1)
        
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 






findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(5,1, max_range = 1e-6), 
                X -> begin
                    i = 2
                    
                    state¬π‚Åª_vol = vcat(stt, 1)
                        
                    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)
                
                    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
                
                    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 
                    
                    yy, matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            zero(kronxx[i]),
                                            zero(kron_buffer2),
                                            J,
                                            ùêí‚Å±,
                                            ùêí‚Å±¬≤·µâ,
                                            shock_independent)

                    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

                    # if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets = ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                        else
                            logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                        end

                        shocks¬≤ = sum(abs2,yy)
                    # end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                state¬π‚Åª_vol)[1]'




‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)

x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# ‚àÇx *= 0
# ‚àÇx[3] = 1
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

‚àÇùêí‚Å±¬≤·µâ = 2 * S[1:length(init_guess)] * kronxŒª[i]' - S[length(init_guess)+1:end] * kronxx[i]'
‚àÇùêí‚Å±¬≤·µâ -= ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

‚àÇùêí¬≤·µâ = ‚àÇùêí‚Å±¬≤·µâ / 2

‚àÇùêí¬≤‚Åª·µâ = ‚àÇùêí‚Å± * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)'

‚àÇùêí¬π·µâ = ‚àÇùêí‚Å±

‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

‚àÇstate¬π‚Åª = ‚àÇstate¬π‚Åª_vol[1:end-1]



###################



stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)
    
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)

    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

    if i > presample_periods
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state = [stt; 1; x[i]]

# end




findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(5,1, max_range = 1e-6), 
                X -> begin
                    stt = ùêí‚Åª¬π * X + ùêí‚Åª¬≤ * ‚Ñí.kron(X, X) / 2

                    i = 2
                    
                    state¬π‚Åª_vol = vcat(stt, 1)
                        
                    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)
                
                    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
                
                    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 
                    
                    yy, matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            zero(kronxx[i]),
                                            zero(kron_buffer2),
                                            J,
                                            ùêí‚Å±,
                                            ùêí‚Å±¬≤·µâ,
                                            shock_independent)

                    jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

                    # if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets = ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                        else
                            logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                        end

                        shocks¬≤ = sum(abs2,yy)
                    # end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                aug_state)[1]'




stt = copy(state[T.past_not_future_and_mixed_idx])

shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
state¬π‚Åª_vol = vcat(stt, 1)

shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

x[i], matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        kronxx[i],
                        kron_buffer2,
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

if i > presample_periods
    if T.nExo == length(observables)
        logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    else
        logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
    end

    shocks¬≤ += sum(abs2,x[i])
end

aug_state = [stt; 1; x[i]]

stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

i = 2

state¬π‚Åª_vol = vcat(stt, 1)
    
shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

yy, matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        zero(kronxx[i]),
                        zero(kron_buffer2),
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)

x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# ‚àÇx *= 0
# ‚àÇx[3] = 1
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

‚àÇùêí‚Å±¬≤·µâ = 2 * S[1:length(init_guess)] * kronxŒª[i]' - S[length(init_guess)+1:end] * kronxx[i]'
‚àÇùêí‚Å±¬≤·µâ -= ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

‚àÇùêí¬≤·µâ = ‚àÇùêí‚Å±¬≤·µâ / 2

‚àÇùêí¬≤‚Åª·µâ = ‚àÇùêí‚Å± * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)'

‚àÇùêí¬π·µâ = ‚àÇùêí‚Å±

‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

# i = 1
# aug_state = [stt; 1; x[i]]
# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
# i = 2
# aug_state = [stt; 1; x[i]]
re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state), 
                        length(aug_state))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

‚àÇaug_state







###################



stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)
    
    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            zeros(size(ùêí‚Å±, 2)),
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent)


# end




findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(5,1, max_range = 1e-6), 
                X -> begin
                    i = 1

                    jacc2 = ùêí‚Å± + 2 * X * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                    if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets = ‚Ñí.logabsdet(jacc2 ./ precision_factor)[1]
                        else
                            logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc2 ./ precision_factor))
                        end
                
                        shocks¬≤ = sum(abs2,x[i])
                    end

                    aug_state = [stt; 1; x[i]]

                    stt2 = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

                    i = 2
                    
                    state¬π‚Åª_vol = vcat(stt2, 1)
                        
                    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)
                
                    ùêí‚Å±2 = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
                
                    # ùêí‚Å±¬≤·µâ2 = ùêí¬≤·µâ / 2 
                    
                    yy, matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            zero(kronxx[i]),
                                            zero(kron_buffer2),
                                            J,
                                            ùêí‚Å±2,
                                            X,
                                            shock_independent)

                    jacc = ùêí‚Å±2 + 2 * X * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

                    # if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                        else
                            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                        end

                        shocks¬≤ += sum(abs2,yy)
                    # end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                ùêí‚Å±¬≤·µâ)[1]'




stt = copy(state[T.past_not_future_and_mixed_idx])

shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
state¬π‚Åª_vol = vcat(stt, 1)

shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

x[i], matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        kronxx[i],
                        kron_buffer2,
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

if i > presample_periods
    if T.nExo == length(observables)
        logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    else
        logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
    end

    shocks¬≤ += sum(abs2,x[i])
end

aug_state = [stt; 1; x[i]]

stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

i = 2

state¬π‚Åª_vol = vcat(stt, 1)
    
shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

yy, matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        zero(kronxx[i]),
                        zero(kron_buffer2),
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)



‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)

x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# ‚àÇx *= 0
# ‚àÇx[3] = 1
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

‚àÇùêí‚Å±¬≤·µâ = 2 * S[1:length(init_guess)] * kronxŒª[i]' - S[length(init_guess)+1:end] * kronxx[i]'
‚àÇùêí‚Å±¬≤·µâ -= ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

‚àÇùêí¬≤·µâ = ‚àÇùêí‚Å±¬≤·µâ / 2

‚àÇùêí¬≤‚Åª·µâ = ‚àÇùêí‚Å± * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)'

‚àÇùêí¬π·µâ = ‚àÇùêí‚Å±

‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state), 
                        length(aug_state))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

‚àÇx = ‚àÇaug_state[length(‚àÇstate)+2:end]

i = 1

stt = copy(state[T.past_not_future_and_mixed_idx])

state¬π‚Åª_vol = vcat(stt, 1)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)


‚àÇx -= copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = -inv(jacc)'


# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚àÇùêí‚Å±¬≤·µâ += ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'




###################



stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
    state¬π‚Åª_vol = vcat(stt, 1)

    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 



findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(5,1, max_range = 1e-6), 
                X -> begin
                    i = 1

                    shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

                    ùêí‚Å± = ùêí¬π·µâ + X * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                    x[i], matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            kronxx[i],
                                            kron_buffer2,
                                            J,
                                            ùêí‚Å±,
                                            ùêí‚Å±¬≤·µâ,
                                            shock_independent)

                    jacc2 = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                    if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets = ‚Ñí.logabsdet(jacc2 ./ precision_factor)[1]
                        else
                            logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc2 ./ precision_factor))
                        end
                
                        shocks¬≤ = sum(abs2,x[i])
                    end

                    aug_state = [stt; 1; x[i]]

                    stt2 = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

                    i = 2
                    
                    state¬π‚Åª_vol2 = vcat(stt2, 1)
                        
                    shock_independent2 = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol2 + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol2, state¬π‚Åª_vol2) / 2)
                
                    ùêí‚Å±2 = ùêí¬π·µâ + X * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol2)
                    
                    yy, matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            zero(kronxx[i]),
                                            zero(kron_buffer2),
                                            J,
                                            ùêí‚Å±2,
                                            ùêí‚Å±¬≤·µâ,
                                            shock_independent2)

                    jacc = ùêí‚Å±2 + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

                    # if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                        else
                            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                        end

                        shocks¬≤ += sum(abs2,yy)
                    # end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                ùêí¬≤‚Åª·µâ)[1]'




stt = copy(state[T.past_not_future_and_mixed_idx])

shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
state¬π‚Åª_vol = vcat(stt, 1)

shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

x[i], matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        kronxx[i],
                        kron_buffer2,
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

if i > presample_periods
    if T.nExo == length(observables)
        logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    else
        logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
    end

    shocks¬≤ += sum(abs2,x[i])
end

aug_state = [stt; 1; x[i]]

stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

i = 2

state¬π‚Åª_vol = vcat(stt, 1)
    
shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

yy, matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        zero(kronxx[i]),
                        zero(kron_buffer2),
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)



‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)

x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# ‚àÇx *= 0
# ‚àÇx[3] = 1
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

‚àÇùêí‚Å±¬≤·µâ = 2 * S[1:length(init_guess)] * kronxŒª[i]' - S[length(init_guess)+1:end] * kronxx[i]'
‚àÇùêí‚Å±¬≤·µâ -= ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

‚àÇùêí¬≤·µâ = ‚àÇùêí‚Å±¬≤·µâ / 2

‚àÇùêí¬≤‚Åª·µâ = ‚àÇùêí‚Å± * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)'

‚àÇùêí¬π·µâ = ‚àÇùêí‚Å±

‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state), 
                        length(aug_state))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

‚àÇx = ‚àÇaug_state[length(‚àÇstate)+2:end]

i = 1

stt = copy(state[T.past_not_future_and_mixed_idx])

state¬π‚Åª_vol = vcat(stt, 1)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)


‚àÇx -= copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = -inv(jacc)'


# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end


Œª[i] = jacc' \ x[i] * 2

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# ‚àÇx *= 0
# ‚àÇx[3] = 1
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = -S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent


‚Ñí.kron!(kronxx[i], x[i], x[i])

‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

‚àÇùêí‚Å±¬≤·µâ -= 2 * S[1:length(init_guess)] * kronxŒª[i]' - S[length(init_guess)+1:end] * kronxx[i]'
‚àÇùêí‚Å±¬≤·µâ += ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'



‚àÇùêí¬≤·µâ -= ‚àÇùêí‚Å±¬≤·µâ / 2

‚àÇùêí¬≤‚Åª·µâ -= ‚àÇùêí‚Å± * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)'

‚àÇùêí¬π·µâ -= ‚àÇùêí‚Å±



isapprox(findiff, vec(‚àÇùêí¬≤‚Åª·µâ))



#####
# this seems to work for two rounds
# let's start by getting derivs for data_in_deviations in a round




findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(5,1, max_range = 1e-6), 
                X -> begin
                    i = 1

                    stt = copy(state[T.past_not_future_and_mixed_idx])
                                    
                    shocks¬≤ = 0.0
                    logabsdets = 0.0

                    dtt = copy(data_in_deviations)
                    # dtt[:,1] = X[:,1]

                    i = 1
                    # for i in 1:2#axes(data_in_deviations,2)
                    state¬π‚Åª_vol = vcat(stt, 1)

                    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                    shock_independent = X[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

                    ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                    x[i], matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            kronxx[i],
                                            kron_buffer2,
                                            J,
                                            ùêí‚Å±,
                                            ùêí‚Å±¬≤·µâ,
                                            shock_independent)

                    jacc2 = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

                    if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets = ‚Ñí.logabsdet(jacc2 ./ precision_factor)[1]
                        else
                            logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc2 ./ precision_factor))
                        end
                
                        shocks¬≤ = sum(abs2,x[i])
                    end

                    aug_state = [stt; 1; x[i]]

                    stt2 = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

                    i = 2
                    
                    state¬π‚Åª_vol2 = vcat(stt2, 1)
                        
                    shock_independent2 = X[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol2 + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol2, state¬π‚Åª_vol2) / 2)
                
                    ùêí‚Å±2 = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol2)
                    
                    yy, matched = find_shocks(Val(filter_algorithm), 
                                            zeros(size(ùêí‚Å±, 2)),
                                            zero(kronxx[i]),
                                            zero(kron_buffer2),
                                            J,
                                            ùêí‚Å±2,
                                            ùêí‚Å±¬≤·µâ,
                                            shock_independent2)

                    jacc = ùêí‚Å±2 + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)

                    # if i > presample_periods
                        if T.nExo == length(observables)
                            logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
                        else
                            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
                        end

                        shocks¬≤ += sum(abs2,yy)
                    # end


                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                dtt)[1]'


stt = copy(state[T.past_not_future_and_mixed_idx])

shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt[:,1] = X[:,1]

i = 1
# for i in 1:2#axes(data_in_deviations,2)
state¬π‚Åª_vol = vcat(stt, 1)

shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

x[i], matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        kronxx[i],
                        kron_buffer2,
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])

if i > presample_periods
    if T.nExo == length(observables)
        logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    else
        logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc ./ precision_factor))
    end

    shocks¬≤ += sum(abs2,x[i])
end

aug_state = [stt; 1; x[i]]

stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2

i = 2

state¬π‚Åª_vol = vcat(stt, 1)
    
shock_independent = dtt[:,i] - (ùêí¬π‚Åª·µõ * state¬π‚Åª_vol + ùêí¬≤‚Åª·µõ * ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol) / 2)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

yy, matched = find_shocks(Val(filter_algorithm), 
                        zeros(size(ùêí‚Å±, 2)),
                        zero(kronxx[i]),
                        zero(kron_buffer2),
                        J,
                        ùêí‚Å±,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent)

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), yy)



‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)

x[i], matched = find_shocks(Val(filter_algorithm), 
                                                zeros(size(ùêí‚Å±, 2)),
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent)

‚àÇx = copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])
# [i]

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

Œª[i] = jacc' \ x[i] * 2
# [i]

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# [i]

‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent


‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state), 
                        length(aug_state))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state,e)
    ei += 1
end

‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

‚àÇx = ‚àÇaug_state[length(stt)+2:end]


i = 1

stt = copy(state[T.past_not_future_and_mixed_idx])

state¬π‚Åª_vol = vcat(stt, 1)

ùêí‚Å± = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

‚àÇx -= copy(x[i])

jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])
# [i]

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc)'


# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end


Œª[i] = jacc' \ x[i] * 2
# [i]

fXŒªp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±, 2), size(ùêí‚Å±, 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±, 2))  jacc'
        -jacc  zeros(size(ùêí‚Å±, 1), size(ùêí‚Å±, 1))]
# [i]

‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇdata_in_deviations[:,i] = -‚àÇshock_independent


isapprox(findiff[1:6], vec(‚àÇdata_in_deviations[:,1:2]), rtol = 1e-5)








stt = state[T.past_not_future_and_mixed_idx]

kronxx = [zeros(T.nExo^2) for _ in 1:size(data_in_deviations,2)]

J = ‚Ñí.I(T.nExo)

kron_buffer2 = ‚Ñí.kron(J, zeros(T.nExo))

x = [zeros(T.nExo) for _ in 1:size(data_in_deviations,2)]

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

ùêí‚Å±tmp = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å± = [zero(ùêí‚Å±tmp) for _ in 1:size(data_in_deviations,2)]

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

aug_state = [zeros(size(ùêí‚Åª¬π,2)) for _ in 1:size(data_in_deviations,2)]

tmp = ùêí‚Å±tmp + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[1])), x[1])

jacc = [zero(tmp) for _ in 1:size(data_in_deviations,2)]

Œª = [zeros(size(tmp, 1)) for _ in 1:size(data_in_deviations,2)]

Œª[1] = tmp' \ x[1] * 2

fXŒªp_tmp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[1], size(ùêí‚Å±[1], 2), size(ùêí‚Å±[1], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[1], 2))  tmp'
            -tmp  zeros(size(ùêí‚Å±[1], 1),size(ùêí‚Å±[1], 1))]

fXŒªp = [zero(fXŒªp_tmp) for _ in 1:size(data_in_deviations,2)]

kronxŒª_tmp = ‚Ñí.kron(x[1], Œª[1])

kronxŒª = [kronxŒª_tmp for _ in 1:size(data_in_deviations,2)]


for i in axes(data_in_deviations,2)
    state¬π‚Åª = stt

    state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

    ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    init_guess = zeros(size(ùêí‚Å±[i], 2))

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±[i],
                            ùêí‚Å±¬≤·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

    Œª[i] = jacc[i]' \ x[i] * 2
    # ‚Ñí.ldiv!(Œª[i], tmp', x[i])
    # ‚Ñí.rmul!(Œª[i], 2)

    fXŒªp[i] = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±[i], 2), size(ùêí‚Å±[i], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[i], 2))  jacc[i]'
                -jacc[i]  zeros(size(ùêí‚Å±[i], 1),size(ùêí‚Å±[i], 1))]

    ‚Ñí.kron!(kronxx[i], x[i], x[i])

    ‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state[i] = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2
end




‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇdata_in_deviations = zero(data_in_deviations)

i = 2
# shocks¬≤ += sum(abs2,x[i])
‚àÇx = copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

# aug_state[i] = [stt; 1; x[i]]
‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]


i = 1
# shocks¬≤ += sum(abs2,x[i])
‚àÇx -= copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = -‚àÇshock_independent


‚àÇdata_in_deviations[:,1:3]



##############
# in a loop

‚àÇùêí‚Å± = zero(ùêí‚Å±[1])
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇx = zero(x[1])
‚àÇstate = zeros(T.nPast_not_future_and_mixed)

for i in 3:-1:1#reverse(axes(data_in_deviations,2))

    # shocks¬≤ += sum(abs2,x[i])
    if i < 3
        ‚àÇx -= copy(x[i])
    else
        ‚àÇx += copy(x[i])
    end

    # logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    ‚àÇjacc = inv(jacc[i])'

    # jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
    ‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

    re‚àÇkronIx = reshape(‚àÇkronIx, 
                            T.nExo, 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIx; dims = (1,3))
        if i< 3
            ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        else
            ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        end
        ei += 1
    end

    # find_shocks
    ‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

    S = fXŒªp[i]' \ ‚àÇxŒª

    if i < 3
        S *= -1
    end

    ‚àÇshock_independent = S[T.nExo+1:end]

    # shock_independent = copy(data_in_deviations[:,i])
    ‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

    # aug_state[i] = [stt; 1; x[i]]
    if i >= 3-2
        ‚àÇstate *= 0
    end

    if i > 1
        # stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
        ‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
        ‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2
        # ‚àÇaug_state *= 0
        re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                                length(aug_state[i]), 
                                length(aug_state[i]))
    
        ei = 1
        for e in eachslice(re‚àÇkronaug_state; dims = (1))
            ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
            ei += 1
        end
    
        ‚àÇstate += ‚àÇaug_state[1:length(‚àÇstate)]

        ei = 1
        for e in eachslice(re‚àÇkronaug_state; dims = (2))
            ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
            ei += 1
        end
    
        # aug_state[i] = [stt; 1; x[i]]
        ‚àÇx = ‚àÇaug_state[length(stt)+2:end]

        # find_shocks
        ‚àÇùêí‚Å± = S[1:T.nExo] * Œª[i]' - S[T.nExo+1:end] * x[i]'
        ‚àÇùêí‚Å± -= ‚àÇjacc / 2

        # ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
        ‚àÇstate¬π‚Åª_vol *= 0
        ‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

        re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                                length(state¬π‚Åª_vol), 
                                T.nExo, 
                                1,
                                T.nExo)

        ei = 1
        for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
            ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
            ei += 1
        end

        # ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
        ‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

        # ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
        ‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

        re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                                length(state¬π‚Åª_vol), 
                                length(state¬π‚Åª_vol))

        ei = 1
        for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
            ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)]; 1],e)
            ei += 1
        end

        ei = 1
        for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
            ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)]; 1],e)
            ei += 1
        end

        # state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
        ‚àÇstate += ‚àÇstate¬π‚Åª_vol[1:end-1]
    end
end

‚àÇdata_in_deviations

‚àÇdata_in_deviations[:,1:3]

reshape(findiff,3,3)
# julia> ‚àÇdata_in_deviations
# 3√ó40 Matrix{Float64}:
#   378.78     330.723   0.0  0.0  ‚Ä¶  0.0  0.0  0.0  0.0  0.0  0.0
#  -388.83     -24.1221  0.0  0.0     0.0  0.0  0.0  0.0  0.0  0.0
#    73.7683  -124.506   0.0  0.0     0.0  0.0  0.0  0.0  0.0  0.0

### fin diff
reshape(findiff,3,3)
findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    # dtt = copy(data_in_deviations)
                    # dtt[:,1] = X[:,1]
                    dtt = X

                    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                    for i in axes(dtt,2)
                        state¬π‚Åª = stt

                        state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
                        
                        # shock_independent = copy(data_in_deviations[:,i])
                        shock_independent = copy(dtt[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

                        ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

                        init_guess = zeros(size(ùêí‚Å±s, 2))

                        xx, matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±s,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,xx)
                        end

                        aug_statee = [stt; 1; xx]

                        stt = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2
                    end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
data_in_deviations[:,1:3])[1]

reshape(findiff,3,3)



#### three periods
findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    # dtt = X

                    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                    # for i in axes(dtt,2)
                    i = 1
                        state¬π‚Åª = stt

                        state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
                        
                        # shock_independent = copy(data_in_deviations[:,i])
                        shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

                        ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

                        init_guess = zeros(size(ùêí‚Å±s, 2))

                        xx, matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±s,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,xx)
                        end

                        aug_statee = [stt; 1; xx]

                        stt = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2
                    # end

                    i = 2
                        state¬π‚Åª = stt

                        state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(data_in_deviations[:,i])
                        # shock_independent = copy(dtt[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

                        ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

                        init_guess = zeros(size(ùêí‚Å±s, 2))

                        xx, matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±s,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,xx)
                        end

                        aug_statee = [stt; 1; xx]

                        # return aug_statee

                        stt = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2

                    i = 3
                        state¬π‚Åª = stt

                        state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(data_in_deviations[:,i])
                        # shock_independent = copy(dtt[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

                        ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

                        init_guess = zeros(size(ùêí‚Å±s, 2))

                        xx, matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±s,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,xx)
                        end

                        aug_statee = [stt; 1; xx]

                        stt = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
copy(data_in_deviations[:,1:3]))[1]

reshape(findiff,3,3)



####################

‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇdata_in_deviations = zero(data_in_deviations)


i = 3
# shocks¬≤ += sum(abs2,x[i])
‚àÇx = copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e)
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

# aug_state[i] = [stt; 1; x[i]]
‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]


i = 2
# shocks¬≤ += sum(abs2,x[i])
‚àÇx -= copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        T.nExo, 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
# ‚àÇstate¬π‚Åª_vol *= 0
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

# aug_state[i] = [stt; 1; x[i]]
‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]


i = 1
# shocks¬≤ += sum(abs2,x[i])
‚àÇx -= copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i]')

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        T.nExo, 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent




‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
# ‚àÇstate¬π‚Åª_vol *= 0
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end


# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

# aug_state[i] = [stt; 1; x[i]]
‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]



‚àÇdata_in_deviations[:,1:3]

reshape(findiff,3,3)

########
# go back step by step


stt = copy(state[T.past_not_future_and_mixed_idx])
                
shocks¬≤ = 0.0
logabsdets = 0.0

dtt = copy(data_in_deviations)
# dtt = X

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

# for i in axes(dtt,2)
i = 1
    state¬π‚Åª = stt

    state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])
    # shock_independent = copy(X[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

    ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

    init_guess = zeros(size(ùêí‚Å±s, 2))

    xx, matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±s,
                            ùêí‚Å±¬≤·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,xx)
    end

    aug_statee = [stt; 1; xx]

    stt = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2
# end

i = 2
state¬π‚Åª = stt

state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)

shock_independent = copy(data_in_deviations[:,i])
# shock_independent = copy(X[:,i])

‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)

‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

init_guess = zeros(size(ùêí‚Å±s, 2))

xx, matched = find_shocks(Val(filter_algorithm), 
                        init_guess,
                        kronxx[i],
                        kron_buffer2,
                        J,
                        ùêí‚Å±s,
                        ùêí‚Å±¬≤·µâ,
                        shock_independent,
                        # max_iter = 100
                        )

jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

if i > presample_periods
    # due to change of variables: jacobian determinant adjustment
    if T.nExo == length(observables)
        logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
    else
        logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
    end

    shocks¬≤ = sum(abs2,xx)
end

aug_statee = [stt; 1; xx]

stt2 = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2


findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                        i = 3
                        state¬π‚Åª = stt2

                        state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
                        
                        # shock_independent = copy(data_in_deviations[:,i])
                        shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

                        ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

                        init_guess = zeros(size(ùêí‚Å±s, 2))

                        xx, matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±s,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets = ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
                            else
                                logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
                            end

                            shocks¬≤ = sum(abs2,xx)
                        end

                        aug_statee = [stt2; 1; xx]

                        stt3 = ùêí‚Åª¬π * aug_statee + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_statee, aug_statee) / 2

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
data_in_deviations[:,1:3])[1]

reshape(findiff,3,3)




‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇdata_in_deviations = zero(data_in_deviations)


i = 3
# shocks¬≤ += sum(abs2,x[i])
‚àÇx = copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[length(init_guess)+1:end]

‚àÇùêí‚Å± = S[1:length(init_guess)] * Œª[i]' - S[length(init_guess)+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(state¬π‚Åª_vol,e)
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate = ‚àÇstate¬π‚Åª_vol[1:end-1]


# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i-1],e)
    ei += 1
end

# aug_state[i] = [stt; 1; x[i]]
‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]





######################
# go back step by step





stt = state[T.past_not_future_and_mixed_idx]

kronxx = [zeros(T.nExo^2) for _ in 1:size(data_in_deviations,2)]

J = ‚Ñí.I(T.nExo)

kron_buffer2 = ‚Ñí.kron(J, zeros(T.nExo))

x = [zeros(T.nExo) for _ in 1:size(data_in_deviations,2)]

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

ùêí‚Å±tmp = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å± = [zero(ùêí‚Å±tmp) for _ in 1:size(data_in_deviations,2)]

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

aug_state = [zeros(size(ùêí‚Åª¬π,2)) for _ in 1:size(data_in_deviations,2)]

tmp = ùêí‚Å±tmp + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[1])), x[1])

jacc = [zero(tmp) for _ in 1:size(data_in_deviations,2)]

Œª = [zeros(size(tmp, 1)) for _ in 1:size(data_in_deviations,2)]

Œª[1] = tmp' \ x[1] * 2

fXŒªp_tmp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[1], size(ùêí‚Å±[1], 2), size(ùêí‚Å±[1], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[1], 2))  tmp'
            -tmp  zeros(size(ùêí‚Å±[1], 1),size(ùêí‚Å±[1], 1))]

fXŒªp = [zero(fXŒªp_tmp) for _ in 1:size(data_in_deviations,2)]

kronxŒª_tmp = ‚Ñí.kron(x[1], Œª[1])

kronxŒª = [kronxŒª_tmp for _ in 1:size(data_in_deviations,2)]


for i in axes(data_in_deviations,2)
    state¬π‚Åª = stt

    state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

    ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    init_guess = zeros(size(ùêí‚Å±[i], 2))

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±[i],
                            ùêí‚Å±¬≤·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

    Œª[i] = jacc[i]' \ x[i] * 2
    # ‚Ñí.ldiv!(Œª[i], tmp', x[i])
    # ‚Ñí.rmul!(Œª[i], 2)

    fXŒªp[i] = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±[i], 2), size(ùêí‚Å±[i], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[i], 2))  jacc[i]'
                -jacc[i]  zeros(size(ùêí‚Å±[i], 1),size(ùêí‚Å±[i], 1))]

    ‚Ñí.kron!(kronxx[i], x[i], x[i])

    ‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state[i] = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2
end



findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1), 
                X -> begin
                        stt = state[T.past_not_future_and_mixed_idx]

                    i = 1

                        state¬π‚Åª_vol = vcat(stt, 1)

                        shock_independent = copy(X[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                        init_guess = zeros(size(ùêí‚Å±[i], 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±[i],
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets = ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets = sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ = sum(abs2,x[i])
                        end

                        aug_states = [stt; 1; x[i]]

                        state¬π‚Åªs = ùêí‚Åª¬π * aug_states + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_states, aug_states) / 2

                    i = 2

                        state¬π‚Åª_vol = vcat(state¬π‚Åªs, 1)
                        
                        shock_independent = copy(data_in_deviations[:,i])
                    
                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
                    
                        ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
                    
                        init_guess = zeros(size(ùêí‚Å±[i], 2))
                    
                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±[i],
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )
                    
                        jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])
                    
                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end
                    
                            shocks¬≤ += sum(abs2,x[i])
                        end
                    
                        aug_state[i] = [state¬π‚Åªs; 1; x[i]]
                    
                        stt2 = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2

                    i = 3
                        
                        state¬π‚Åª = stt2

                        state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
                        
                        shock_independent = copy(data_in_deviations[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

                        ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

                        init_guess = zeros(size(ùêí‚Å±[i], 2))

                        x[i], matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                kronxx[i],
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±[i],
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,x[i])
                        end

                        # aug_state[i] = [stt; 1; x[i]]

                        # stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                    # shocks¬≤/2
                end, 
                copy(data_in_deviations))[1]'

reshape(findiff,3,3)

‚àÇaug_state

ùêí‚Åª¬π' * [
177.37832468258554
-87.23046293002642
 -4.452094885937977
-12.826327254466602
]


stt = state[T.past_not_future_and_mixed_idx]

kronxx = [zeros(T.nExo^2) for _ in 1:size(data_in_deviations,2)]

J = ‚Ñí.I(T.nExo)

kron_buffer2 = ‚Ñí.kron(J, zeros(T.nExo))

x = [zeros(T.nExo) for _ in 1:size(data_in_deviations,2)]

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

ùêí‚Å±tmp = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å± = [zero(ùêí‚Å±tmp) for _ in 1:size(data_in_deviations,2)]

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

aug_state = [zeros(size(ùêí‚Åª¬π,2)) for _ in 1:size(data_in_deviations,2)]

tmp = ùêí‚Å±tmp + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[1])), x[1])

jacc = [zero(tmp) for _ in 1:size(data_in_deviations,2)]

Œª = [zeros(size(tmp, 1)) for _ in 1:size(data_in_deviations,2)]

Œª[1] = tmp' \ x[1] * 2

fXŒªp_tmp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[1], size(ùêí‚Å±[1], 2), size(ùêí‚Å±[1], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[1], 2))  tmp'
            -tmp  zeros(size(ùêí‚Å±[1], 1),size(ùêí‚Å±[1], 1))]

fXŒªp = [zero(fXŒªp_tmp) for _ in 1:size(data_in_deviations,2)]

kronxŒª_tmp = ‚Ñí.kron(x[1], Œª[1])

kronxŒª = [kronxŒª_tmp for _ in 1:size(data_in_deviations,2)]


for i in axes(data_in_deviations,2)
    state¬π‚Åª = stt

    state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

    ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    init_guess = zeros(size(ùêí‚Å±[i], 2))

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±[i],
                            ùêí‚Å±¬≤·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

    Œª[i] = jacc[i]' \ x[i] * 2
    # ‚Ñí.ldiv!(Œª[i], tmp', x[i])
    # ‚Ñí.rmul!(Œª[i], 2)

    fXŒªp[i] = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±[i], 2), size(ùêí‚Å±[i], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[i], 2))  jacc[i]'
                -jacc[i]  zeros(size(ùêí‚Å±[i], 1),size(ùêí‚Å±[i], 1))]

    ‚Ñí.kron!(kronxx[i], x[i], x[i])

    ‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state[i] = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2
end










‚àÇùêí‚Å± = zero(ùêí‚Å±)
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)
‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇdata_in_deviations = zero(data_in_deviations)
‚àÇstate = zeros(T.nPast_not_future_and_mixed)

i = 3
# shocks¬≤ += sum(abs2,x[i])
‚àÇx = copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        length(x[i]), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[T.nExo+1:end]

‚àÇùêí‚Å± = S[1:T.nExo] * Œª[i]' - S[T.nExo+1:end] * x[i]'
‚àÇùêí‚Å± -= ‚àÇjacc / 2

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e)
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate += ‚àÇstate¬π‚Åª_vol[1:end-1]
println(‚àÇstate)

i = 2

# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
    ei += 1
end

# aug_state[i] = [stt; 1; x[i]]
‚àÇstate = ‚àÇaug_state[1:length(‚àÇstate)]

println(‚àÇstate)
# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]


# shocks¬≤ += sum(abs2,x[i])
‚àÇx -= copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        T.nExo, 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e) # fine
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[T.nExo+1:end] # fine

‚àÇùêí‚Å± = (S[1:T.nExo] * Œª[i]' - S[T.nExo+1:end] * x[i]') # fine
‚àÇùêí‚Å± -= ‚àÇjacc / 2 # fine

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
‚àÇstate¬π‚Åª_vol *= 0
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent


# ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

# ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        length(state¬π‚Åª_vol))

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e) # fine
    ei += 1
end

# state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
‚àÇstate += ‚àÇstate¬π‚Åª_vol[1:end-1]

println(‚àÇstate)
i = 1
# this transition doesnt work; as in ‚àÇstate is correct but the next ‚àÇaug_state isnt
# stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2
# ‚àÇaug_state *= 0
re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                        length(aug_state[i]), 
                        length(aug_state[i]))

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (1))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
    ei += 1
end

ei = 1
for e in eachslice(re‚àÇkronaug_state; dims = (2))
    ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
    ei += 1
end


# aug_state[i] = [stt; 1; x[i]]
‚àÇstate += ‚àÇaug_state[1:length(‚àÇstate)]

# aug_state[i] = [stt; 1; x[i]]
‚àÇx = ‚àÇaug_state[length(stt)+2:end]

# shocks¬≤ += sum(abs2,x[i])
‚àÇx -= copy(x[i])

# logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
‚àÇjacc = inv(jacc[i])'

# jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

re‚àÇkronIx = reshape(‚àÇkronIx, 
                        T.nExo, 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIx; dims = (1,3))
    ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e) # fine
    ei += 1
end

# find_shocks
‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

S = -fXŒªp[i]' \ ‚àÇxŒª

‚àÇshock_independent = S[T.nExo+1:end] # fine

‚àÇùêí‚Å± = (S[1:T.nExo] * Œª[i]' - S[T.nExo+1:end] * x[i]') # fine
‚àÇùêí‚Å± -= ‚àÇjacc / 2 # fine

# ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
‚àÇstate¬π‚Åª_vol *= 0
‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                        length(state¬π‚Åª_vol), 
                        T.nExo, 
                        1,
                        T.nExo)

ei = 1
for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
    ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
    ei += 1
end

# shock_independent = copy(data_in_deviations[:,i])
‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent

‚àÇdata_in_deviations[:,1:3]
findiff[1:9]





#### try loop again

stt = state[T.past_not_future_and_mixed_idx]

kronxx = [zeros(T.nExo^2) for _ in 1:size(data_in_deviations,2)]

J = ‚Ñí.I(T.nExo)

kron_buffer2 = ‚Ñí.kron(J, zeros(T.nExo))

x = [zeros(T.nExo) for _ in 1:size(data_in_deviations,2)]

state¬π‚Åª = stt

state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)

ùêí‚Å±tmp = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

ùêí‚Å± = [zero(ùêí‚Å±tmp) for _ in 1:size(data_in_deviations,2)]

ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

aug_state = [zeros(size(ùêí‚Åª¬π,2)) for _ in 1:size(data_in_deviations,2)]

tmp = ùêí‚Å±tmp + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[1])), x[1])

jacc = [zero(tmp) for _ in 1:size(data_in_deviations,2)]

Œª = [zeros(size(tmp, 1)) for _ in 1:size(data_in_deviations,2)]

Œª[1] = tmp' \ x[1] * 2

fXŒªp_tmp = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[1], size(ùêí‚Å±[1], 2), size(ùêí‚Å±[1], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[1], 2))  tmp'
            -tmp  zeros(size(ùêí‚Å±[1], 1),size(ùêí‚Å±[1], 1))]

fXŒªp = [zero(fXŒªp_tmp) for _ in 1:size(data_in_deviations,2)]

kronxŒª_tmp = ‚Ñí.kron(x[1], Œª[1])

kronxŒª = [kronxŒª_tmp for _ in 1:size(data_in_deviations,2)]


for i in axes(data_in_deviations,2)
    state¬π‚Åª = stt

    state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    
    shock_independent = copy(data_in_deviations[:,i])

    ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    
    ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)

    ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)

    init_guess = zeros(size(ùêí‚Å±[i], 2))

    x[i], matched = find_shocks(Val(filter_algorithm), 
                            init_guess,
                            kronxx[i],
                            kron_buffer2,
                            J,
                            ùêí‚Å±[i],
                            ùêí‚Å±¬≤·µâ,
                            shock_independent,
                            # max_iter = 100
                            )

    jacc[i] =  ùêí‚Å±[i] + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(length(x[i])), x[i])

    Œª[i] = jacc[i]' \ x[i] * 2
    # ‚Ñí.ldiv!(Œª[i], tmp', x[i])
    # ‚Ñí.rmul!(Œª[i], 2)

    fXŒªp[i] = [reshape(2 * ùêí‚Å±¬≤·µâ' * Œª[i], size(ùêí‚Å±[i], 2), size(ùêí‚Å±[i], 2)) - 2 * ‚Ñí.I(size(ùêí‚Å±[i], 2))  jacc[i]'
                -jacc[i]  zeros(size(ùêí‚Å±[i], 1),size(ùêí‚Å±[i], 1))]

    ‚Ñí.kron!(kronxx[i], x[i], x[i])

    ‚Ñí.kron!(kronxŒª[i], x[i], Œª[i])

    if i > presample_periods
        # due to change of variables: jacobian determinant adjustment
        if T.nExo == length(observables)
            logabsdets += ‚Ñí.logabsdet(jacc[i] ./ precision_factor)[1]
        else
            logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jacc[i] ./ precision_factor))
        end

        shocks¬≤ += sum(abs2,x[i])
    end

    aug_state[i] = [stt; 1; x[i]]

    stt = ùêí‚Åª¬π * aug_state[i] + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state[i], aug_state[i]) / 2
end






n_end = size(data_in_deviations,2)

‚àÇùêí¬π·µâ = zero(ùêí¬π·µâ)
‚àÇùêí¬≤‚Åª·µâ = zero(ùêí¬≤‚Åª·µâ)

‚àÇùêí¬π‚Åª·µõ = zero(ùêí¬π‚Åª·µõ)
‚àÇùêí¬≤‚Åª·µõ = zero(ùêí¬≤‚Åª·µõ)

‚àÇùêí‚Åª¬π = zero(ùêí‚Åª¬π)
‚àÇùêí‚Åª¬≤ = zero(ùêí‚Åª¬≤)

‚àÇùêí‚Å± = zero(ùêí‚Å±[1])
‚àÇùêí‚Å±¬≤·µâ = zero(ùêí‚Å±¬≤·µâ)

‚àÇstate¬π‚Åª_vol = zero(state¬π‚Åª_vol)
‚àÇx = zero(x[1])
‚àÇstate = zeros(T.nPast_not_future_and_mixed)

for i in reverse(axes(data_in_deviations,2))
    # stt = ùêí‚Åª¬π * aug_state + ùêí‚Åª¬≤ * ‚Ñí.kron(aug_state, aug_state) / 2
    ‚àÇùêí‚Åª¬π += ‚àÇstate * aug_state[i]'
    
    ‚àÇùêí‚Åª¬≤ += ‚àÇstate * ‚Ñí.kron(aug_state[i], aug_state[i])' / 2

    ‚àÇaug_state = ùêí‚Åª¬π' * ‚àÇstate
    ‚àÇkronaug_state  = ùêí‚Åª¬≤' * ‚àÇstate / 2

    re‚àÇkronaug_state = reshape(‚àÇkronaug_state, 
                            length(aug_state[i]), 
                            length(aug_state[i]))

    ei = 1
    for e in eachslice(re‚àÇkronaug_state; dims = (1))
        ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronaug_state; dims = (2))
        ‚àÇaug_state[ei] += ‚Ñí.dot(aug_state[i],e)
        ei += 1
    end

    if i > 1 && i < n_end
        ‚àÇstate *= 0
    end
    # aug_state[i] = [stt; 1; x[i]]
    ‚àÇstate += ‚àÇaug_state[1:length(‚àÇstate)]

    # aug_state[i] = [stt; 1; x[i]]
    ‚àÇx = ‚àÇaug_state[length(stt)+2:end]

    # shocks¬≤ += sum(abs2,x[i])
    if i < n_end
        ‚àÇx -= copy(x[i])
    else
        ‚àÇx += copy(x[i])
    end

    # logabsdets += ‚Ñí.logabsdet(jacc ./ precision_factor)[1]
    ‚àÇjacc = inv(jacc[i])'

    # jacc = ùêí‚Å± + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), x[1])
    ‚àÇkronIx = ùêí‚Å±¬≤·µâ' * ‚àÇjacc

    re‚àÇkronIx = reshape(‚àÇkronIx, 
                            T.nExo, 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIx; dims = (1,3))
        if i < n_end
            ‚àÇx[ei] -= ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        else
            ‚àÇx[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        end
        ei += 1
    end

    ‚àÇùêí‚Å±¬≤·µâ -= ‚àÇjacc * ‚Ñí.kron(‚Ñí.I(T.nExo), x[i])'

    # find_shocks
    ‚àÇxŒª = vcat(‚àÇx, zero(Œª[i]))

    S = fXŒªp[i]' \ ‚àÇxŒª

    if i < n_end
        S *= -1
    end

    ‚àÇshock_independent = S[T.nExo+1:end] # fine

    ‚àÇùêí‚Å± = (S[1:T.nExo] * Œª[i]' - S[T.nExo+1:end] * x[i]') # fine
    ‚àÇùêí‚Å± -= ‚àÇjacc / 2 # fine

    ‚àÇùêí‚Å±¬≤·µâ += 2 * S[1:T.nExo] *  kronxŒª[i]' - S[T.nExo+1:end] * kronxx[i]'

    # ùêí‚Å±[i] = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vol)
    ‚àÇstate¬π‚Åª_vol *= 0
    ‚àÇkronIstate¬π‚Åª_vol = ùêí¬≤‚Åª·µâ' * ‚àÇùêí‚Å±

    re‚àÇkronIstate¬π‚Åª_vol = reshape(‚àÇkronIstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            T.nExo, 
                            1,
                            T.nExo)

    ei = 1
    for e in eachslice(re‚àÇkronIstate¬π‚Åª_vol; dims = (1,3))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot(‚Ñí.I(T.nExo),e)
        ei += 1
    end

    ‚àÇùêí¬π·µâ += ‚àÇùêí‚Å±

    ‚àÇùêí¬≤‚Åª·µâ += ‚àÇùêí‚Å± * ‚Ñí.kron(‚Ñí.I(T.nExo), [aug_state[i][1:length(stt)];1])'

    # shock_independent = copy(data_in_deviations[:,i])
    ‚àÇdata_in_deviations[:,i] = ‚àÇshock_independent


    # ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vol, -1, 1)
    ‚àÇùêí¬π‚Åª·µõ -= ‚àÇshock_independent * [aug_state[i][1:length(stt)];1]'

    ‚àÇstate¬π‚Åª_vol -= ùêí¬π‚Åª·µõ' * ‚àÇshock_independent

    # ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vol, state¬π‚Åª_vol), -1/2, 1)
    ‚àÇùêí¬≤‚Åª·µõ -= ‚àÇshock_independent * ‚Ñí.kron([aug_state[i][1:length(stt)];1], [aug_state[i][1:length(stt)];1])' / 2

    ‚àÇkronstate¬π‚Åª_vol = -ùêí¬≤‚Åª·µõ' * ‚àÇshock_independent / 2

    re‚àÇkronstate¬π‚Åª_vol = reshape(‚àÇkronstate¬π‚Åª_vol, 
                            length(state¬π‚Åª_vol), 
                            length(state¬π‚Åª_vol))

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (1))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e)
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronstate¬π‚Åª_vol; dims = (2))
        ‚àÇstate¬π‚Åª_vol[ei] += ‚Ñí.dot([aug_state[i][1:length(stt)];1],e) # fine
        ei += 1
    end

    # state¬π‚Åª_vol = vcat(state¬π‚Åª, 1)
    ‚àÇstate += ‚àÇstate¬π‚Åª_vol[1:end-1]
end

‚àÇùêí¬≤·µâ = ‚àÇùêí‚Å±¬≤·µâ / 2



‚àÇùêí¬π·µâ

‚àÇùêí¬π‚Åª·µõ

‚àÇdata_in_deviations[:,1:n_end]


#### findiff loop

findiff = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1, max_range = 1e-6), 
                X -> begin
                    stt = copy(state[T.past_not_future_and_mixed_idx])
                
                    shocks¬≤ = 0.0
                    logabsdets = 0.0
                    
                    dtt = copy(data_in_deviations)
                    # dtt = copy(data_in_deviations[:,[1]])
                    # dtt[:,1] = X[:,1]
                    # dtt = X

                    ùêí‚Å±¬≤·µâ = ùêí¬≤·µâ / 2 

                    for i in axes(dtt,2)
                        state¬π‚Åª = stt

                        state¬π‚Åª_vols = vcat(state¬π‚Åª, 1)
                        
                        # shock_independent = copy(data_in_deviations[:,i])
                        shock_independent = copy(dtt[:,i])

                        ‚Ñí.mul!(shock_independent, ùêí¬π‚Åª·µõ, state¬π‚Åª_vols, -1, 1)
                        
                        ‚Ñí.mul!(shock_independent, ùêí¬≤‚Åª·µõ, ‚Ñí.kron(state¬π‚Åª_vols, state¬π‚Åª_vols), -1/2, 1)

                        ùêí‚Å±s = ùêí¬π·µâ + ùêí¬≤‚Åª·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), state¬π‚Åª_vols)

                        init_guess = zeros(size(ùêí‚Å±s, 2))

                        xx, matched = find_shocks(Val(filter_algorithm), 
                                                init_guess,
                                                copy(kronxx[i]),
                                                kron_buffer2,
                                                J,
                                                ùêí‚Å±s,
                                                ùêí‚Å±¬≤·µâ,
                                                shock_independent,
                                                # max_iter = 100
                                                )

                        jaccc = ùêí‚Å±s + 2 * ùêí‚Å±¬≤·µâ * ‚Ñí.kron(‚Ñí.I(T.nExo), xx)

                        if i > presample_periods
                            # due to change of variables: jacobian determinant adjustment
                            if T.nExo == length(observables)
                                logabsdets += ‚Ñí.logabsdet(jaccc ./ precision_factor)[1]
                            else
                                logabsdets += sum(x -> log(abs(x)), ‚Ñí.svdvals(jaccc ./ precision_factor))
                            end

                            shocks¬≤ += sum(abs2,xx)
                        end

                        aug_statee = [stt; 1; xx]

                        stt = ùêí‚Åª¬π * aug_statee + X * ‚Ñí.kron(aug_statee, aug_statee) / 2
                    end

                    -(logabsdets + shocks¬≤ + (length(observables) * (0 + n_obs - 0)) * log(2 * 3.141592653589793)) / 2
                end, 
                ùêí‚Åª¬≤)[1]'

                ‚àÇùêí‚Åª¬π
                reshape(findiff,4,8)
                isapprox(‚àÇùêí‚Åª¬π, reshape(findiff,4,8))

                ‚àÇùêí‚Åª¬≤
                reshape(findiff,4,64)
                isapprox(‚àÇùêí‚Åª¬≤, reshape(findiff,4,64))

                ‚àÇùêí¬≤‚Åª·µõ
                reshape(findiff,3,25)
                isapprox(‚àÇùêí¬≤‚Åª·µõ, reshape(findiff,3,25))

                ‚àÇùêí¬π‚Åª·µõ
                reshape(findiff,3,5)
                isapprox(‚àÇùêí¬π‚Åª·µõ, reshape(findiff,3,5))


                ‚àÇùêí¬π·µâ
                reshape(findiff,3,3)
                isapprox(‚àÇùêí¬π·µâ, reshape(findiff,3,3))

                ‚àÇùêí¬≤‚Åª·µâ
                reshape(findiff,3,15)
                isapprox(‚àÇùêí¬≤‚Åª·µâ, reshape(findiff,3,15))


                ‚àÇùêí‚Å±¬≤·µâ
                reshape(findiff,3,9)
                isapprox(‚àÇùêí‚Å±¬≤·µâ, reshape(findiff,3,9))

                
‚àÇdata_in_deviations[:,1:n_end]
reshape(findiff,3,n_end)

reshape(findiff,3,9)
‚àÇùêí¬≤‚Åª·µâ

isapprox(‚àÇdata_in_deviations[:,1:n_end], reshape(findiff,3,n_end))





fin_debug = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[10], ùìÇ.parameter_values)[1]
zyg_debug = Zygote.jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[10], ùìÇ.parameter_values)[1]
isapprox(zyg_debug, fin_debug)

‚Ñí.norm(zyg_debug - fin_debug) / max(‚Ñí.norm(fin_debug), ‚Ñí.norm(zyg_debug))

import DifferentiationInterface as ùíü
backend = ùíü.AutoZygote()

xxx = ùíü.value_and_jacobian(x -> calculate_third_order_stochastic_steady_state(x, ùìÇ, pruning = true)[10], backend, ùìÇ.parameter_values)
xxx[2]
isapprox(s3,xxx[1])
# second order
for1 = ForwardDiff.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[1], ùìÇ.parameter_values)
zyg1 = Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[1], ùìÇ.parameter_values)[1]
fin1 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[1], ùìÇ.parameter_values)[1]
isapprox(zyg1,fin1)
zyg1-fin1

zyg2 = Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[3], ùìÇ.parameter_values)[1]
fin2 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[3], ùìÇ.parameter_values)[1]
isapprox(zyg2,fin2)

zyg3 = Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[5], ùìÇ.parameter_values)[1]
fin3 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[5], ùìÇ.parameter_values)[1]
isapprox(zyg3,fin3)

zyg4 = Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[6], ùìÇ.parameter_values)[1]
fin4 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[6], ùìÇ.parameter_values)[1]
isapprox(zyg4,fin4)

zyg5 = Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[7], ùìÇ.parameter_values)[1]
fin5 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[7], ùìÇ.parameter_values)[1]
isapprox(zyg5,fin5)

zyg6 = Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[8], ùìÇ.parameter_values)[1]
fin6 = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[8], ùìÇ.parameter_values)[1]
isapprox(zyg6,fin6)


Zygote.jacobian(x -> calculate_second_order_stochastic_steady_state(x, ùìÇ, pruning = true)[3], ùìÇ.parameter_values)[1]

sss, converged, SS_and_pars, solution_error, ‚àá‚ÇÅ, ‚àá‚ÇÇ, ùêí‚ÇÅ, ùêí‚ÇÇ = calculate_second_order_stochastic_steady_state(parameter_values, ùìÇ, pruning = true)







TT, SS_and_pars, ùêí, state, solved = get_relevant_steady_state_and_state_update(Val(algorithm), ùìÇ.parameter_values, ùìÇ, tol);


# hessian derivatives
X = [ùìÇ.parameter_values; SS_and_pars]

vals = zeros(Float64, length(ùìÇ.model_hessian_SS_and_pars_vars[1]))

for f in ùìÇ.model_hessian_SS_and_pars_vars[1]
    out = f(X)
    
    @inbounds vals[out[2]] = out[1]
end

Accessors.@reset ùìÇ.model_hessian_SS_and_pars_vars[2].nzval = vals;
        
analytical_hess_SS_and_pars_vars = ùìÇ.model_hessian_SS_and_pars_vars[2] |> ThreadedSparseArrays.ThreadedSparseMatrixCSC



par_hess = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_hessian(x, SS_and_pars, ùìÇ), parameters)[1]
    
SS_hess = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_hessian(parameters, x, ùìÇ), SS_and_pars)[1]
                            
findiff = hcat(par_hess,SS_hess)' |>sparse 


isapprox(analytical_hess_SS_and_pars_vars,findiff)


# third order
vals = zeros(Float64, length(ùìÇ.model_third_order_derivatives_SS_and_pars_vars[1]))

Polyester.@batch minbatch = 200 for f in ùìÇ.model_third_order_derivatives_SS_and_pars_vars[1]
    out = f(X)
    
    @inbounds vals[out[2]] = out[1]
end

Accessors.@reset ùìÇ.model_third_order_derivatives_SS_and_pars_vars[2].nzval = vals

analytical_third_order_derivatives_SS_and_pars_vars = ùìÇ.model_third_order_derivatives_SS_and_pars_vars[2] |> ThreadedSparseArrays.ThreadedSparseMatrixCSC


par_hess = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_third_order_derivatives(x, SS_and_pars, ùìÇ), parameters)[1]
    
SS_hess = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_third_order_derivatives(parameters, x, ùìÇ), SS_and_pars)[1]
                            
findiff = hcat(par_hess,SS_hess)' |>sparse 


isapprox(analytical_third_order_derivatives_SS_and_pars_vars,findiff)




# second order solution

‚àá‚ÇÅ = calculate_jacobian(parameters, SS_and_pars, ùìÇ)# |> Matrix
    
ùêí‚ÇÅ, solved = calculate_first_order_solution(‚àá‚ÇÅ; T = ùìÇ.timings)

‚àá‚ÇÇ = calculate_hessian(parameters, SS_and_pars, ùìÇ) * ùìÇ.solution.perturbation.second_order_auxilliary_matrices.ùêî‚àá‚ÇÇ

ùêí‚ÇÇ, solved2 = calculate_second_order_solution(‚àá‚ÇÅ, ‚àá‚ÇÇ, ùêí‚ÇÅ, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings, sylvester_algorithm = sylvester_algorithm, tol = tol, verbose = verbose)

# droptol!(ùêí‚ÇÇ,1e-6)


ùêí‚ÇÅzyg = Zygote.jacobian(x -> calculate_second_order_solution(‚àá‚ÇÅ, ‚àá‚ÇÇ, x, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1][5], ùêí‚ÇÅ)[1]




‚àá‚ÇÇfin = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_second_order_solution(‚àá‚ÇÅ, sparse(x), ùêí‚ÇÅ, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1][5], collect(‚àá‚ÇÇ))[1]

‚àá‚ÇÇzyg = Zygote.jacobian(x -> calculate_second_order_solution(‚àá‚ÇÅ, x, ùêí‚ÇÅ, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1][5], ‚àá‚ÇÇ)[1]

isapprox(‚àá‚ÇÇfin, ‚àá‚ÇÇzyg)



‚àá‚ÇÅfin = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_second_order_solution(x, ‚àá‚ÇÇ, ùêí‚ÇÅ, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1], ‚àá‚ÇÅ)[1]

‚àá‚ÇÅzyg = Zygote.jacobian(x -> calculate_second_order_solution(x, ‚àá‚ÇÇ, ùêí‚ÇÅ, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1], ‚àá‚ÇÅ)[1]

isapprox(‚àá‚ÇÅzyg, ‚àá‚ÇÅfin)





ùêí‚ÇÅfin = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_second_order_solution(‚àá‚ÇÅ, ‚àá‚ÇÇ, x, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1], ùêí‚ÇÅ)[1]

ùêí‚ÇÅzyg = Zygote.jacobian(x -> calculate_second_order_solution(‚àá‚ÇÅ, ‚àá‚ÇÇ, x, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1], ùêí‚ÇÅ)[1]

isapprox(ùêí‚ÇÅfin, ùêí‚ÇÅzyg)

Zygote.jacobian(x->kron(x,x),collect(aa))[1]




# go manual

ùêí‚ÇÅzyg = Zygote.jacobian(x -> calculate_second_order_solution(‚àá‚ÇÅ, ‚àá‚ÇÇ, x, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)[1], ùêí‚ÇÅ)[1]



function calculate_second_order_solution_short(‚àá‚ÇÅ::AbstractMatrix{<: Real}, #first order derivatives
    ‚àá‚ÇÇ::SparseMatrixCSC{<: Real}, #second order derivatives
    ùë∫‚ÇÅ::AbstractMatrix{<: Real},#first order solution
    M‚ÇÇ::second_order_auxilliary_matrices;  # aux matrices
    T::timings,
    sylvester_algorithm::Symbol = :doubling,
    tol::AbstractFloat = eps(),
    verbose::Bool = false)

    # Indices and number of variables
    i‚Çä = T.future_not_past_and_mixed_idx;
    i‚Çã = T.past_not_future_and_mixed_idx;

    n‚Çã = T.nPast_not_future_and_mixed
    n‚Çä = T.nFuture_not_past_and_mixed
    n‚Çë = T.nExo;
    n  = T.nVars
    n‚Çë‚Çã = n‚Çã + 1 + n‚Çë

    # 1st order solution
    ùêí‚ÇÅ = @views [ùë∫‚ÇÅ[:,1:n‚Çã] zeros(n) ùë∫‚ÇÅ[:,n‚Çã+1:end]] |> sparse
    droptol!(ùêí‚ÇÅ,tol)

    ùêí‚ÇÅ‚Çä‚ï±ùüé = @views [ùêí‚ÇÅ[i‚Çä,:]
                    zeros(n‚Çã + n + n‚Çë, n‚Çë‚Çã)];

    ‚àá‚ÇÇ‚é∏k‚é∏ùêí‚ÇÅùêí‚ÇÅ‚Çã‚ï±ùüè‚Çë‚éπ‚ï±ùêí‚ÇÅ‚ï±ùüè‚Çë‚Çã‚ûïùõîkùêí‚ÇÅ‚Çä‚ï±ùüé‚éπ = - ‚àá‚ÇÇ * ‚Ñí.kron(ùêí‚ÇÅ‚Çä‚ï±ùüé, ùêí‚ÇÅ‚Çä‚ï±ùüé) * M‚ÇÇ.ùõî * M‚ÇÇ.ùêÇ‚ÇÇ 
end


ùêí‚ÇÅfin = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> MacroModelling.calculate_second_order_solution_short(‚àá‚ÇÅ, ‚àá‚ÇÇ, x, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings), ùêí‚ÇÅ)[1]|>sparse

ùêí‚ÇÅzyg = Zygote.jacobian(x -> MacroModelling.calculate_second_order_solution_short(‚àá‚ÇÅ, ‚àá‚ÇÇ, x, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings), ùêí‚ÇÅ)[1]|>sparse

isapprox(ùêí‚ÇÅfin,ùêí‚ÇÅzyg)
MacroModelling.calculate_second_order_solution_short(‚àá‚ÇÅ, ‚àá‚ÇÇ, ùêí‚ÇÅ, ùìÇ.solution.perturbation.second_order_auxilliary_matrices; T = ùìÇ.timings)




# fix kron derivative
aa = randn(2,3)

kron(aa,aa)

zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]

@profview zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]

‚àÇkronaa = zero(kron(aa,aa))
# ‚àÇkronaa[1,1] = 1
‚àÇkronaa[1,2] = 1

reshape(‚àÇkronaa,6,6) * vec(aa)

reshape(‚àÇkronaa,18,2) * (aa')

reshape(‚àÇkronaa,6,6) .* vec(aa) + vec(aa) * vec(‚àÇkronaa)'

reshape(‚àÇkronaa,3,3,2,2)

mapslices(x -> ‚Ñí.dot(aa,x), reshape(‚àÇkronaa,3,3,2,2); dims = (1, 3))[1,:,1,:]

2 * mapslices(x -> ‚Ñí.dot(aa,x), reshape(‚àÇkronaa,3,3,2,2); dims = (2, 4))[:,1,:,1]

mapslices(x -> ‚Ñí.dot(aa,x), reshape(‚àÇkronaa,2,2,3,3); dims = (1, 3))[1,:,1,:]


zygkrondiff[:,1]



aa = sparse([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8], [0.6909919605821032, -0.27259360909626684, -2.53628717368683e-15, -26.45556000884485, -17.05911351808633, -0.25461959596982364, 0.13392857142856754, 7.04619863731337e-16, 10.195837547363936, 5.228985756735007, 0.24628104913305907, 0.08807182556648097, 0.5000000000000004, 5.791255979395697, 2.410844892168823, -0.49256209826611513, -0.17614365113296282, -3.3768393832643107e-16, -10.168772175270396, -3.2312325278764695, 0.007677688450912701, -0.0030288178788474914, -0.2939506667649496, -0.18954570575651816, -0.0024628104913305524, -0.0008807182556648164, -0.050843860876352225, -0.016156162639382483, -0.02462810491330557, -0.008807182556648158, -0.05, -0.5791255979395746, -0.24108448921688472], 35, 8) |> collect

kron(aa,aa)

zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]

‚àÇkronaa = zero(kron(aa,aa))
# ‚àÇkronaa = zero(mat1_rsh).*(zero(mat2_rsh).+1);
# size(‚àÇkronaa)

‚àÇkronaa[4] = 1
re‚àÇkronaa = reshape(‚àÇkronaa,size(aa,1),size(aa,2),size(aa,1) ,size(aa,2));

using Combinatorics
# perms = (2,3,4,1)
# perms = (2,3,1,4)
        # perms = (1,3,4,2)
        # perms = (1,3,2,4)
        # perms = (3,1,4,2)

        # perms = [(2,3,4,1), (3,4,1,2), (4,1,2,3), (1,2,3,4)]

        for perm in permutations(1:4)
            perm‚àÇkronaa = permutedims(re‚àÇkronaa, perm)
            result = (vec(aa)' * reshape(perm‚àÇkronaa, size(aa,1)*size(aa,2), size(aa,1)*size(aa,2)))[4]
            if result == aa[1] println("Permutation $perm: $result") end
        end
# Permutation [2, 3, 1, 4]: 0.6909919605821032
# Permutation [3, 2, 1, 4]: 0.6909919605821032
# Permutation [3, 4, 1, 2]: 0.6909919605821032
# Permutation [4, 3, 1, 2]: 0.6909919605821032

perms = (2,3,1,4)
perm‚àÇkronaa = permutedims(re‚àÇkronaa, perms); 

(vec(aa)' * reshape(perm‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)))

zygkrondiff


for i in 1:size(zygkrondiff,1)
    nn = i
    ‚àÇkronaa = zero(kron(aa,aa))

    ‚àÇkronaa[nn] = 1

    re‚àÇkronaa = reshape(‚àÇkronaa,size(aa,1),size(aa,2),size(aa,1) ,size(aa,2));

    perm = [2, 3, 1, 4]
    perm = [3, 2, 1, 4]
    perm = [4, 3, 1, 2]
    perm = [3, 2, 1, 4]
    perm‚àÇkronaa = permutedims(re‚àÇkronaa, perm); 

    vec(aa)' * reshape(perm‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2))

    vec(aa)' * (reshape(‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)) + reshape(perm‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)))

    holds = isapprox((vec(aa)' * (reshape(‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)) + reshape(perm‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2))))[1,:], zygkrondiff[nn,:])

    if !holds 
        println(i) 
        break
    end
end

zygkrondiff[36,:]



nn = 360
perm = [2, 1, 4, 3]
perm2 = [4, 3, 2, 1]

‚àÇkronaa = zero(kron(aa,aa))
‚àÇkronaa[nn] = 1
re‚àÇkronaa = reshape(‚àÇkronaa,size(aa,1),size(aa,2),size(aa,1) ,size(aa,2));

perm‚àÇkronaa = permutedims(re‚àÇkronaa, perm);
perm‚àÇkronaa2 = permutedims(re‚àÇkronaa, perm2);
result = (vec(aa)' * (reshape(perm‚àÇkronaa2, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)) + reshape( perm‚àÇkronaa, size(aa,1)*size(aa,2), size(aa,1)*size(aa,2))))

result[1,:] == zygkrondiff[nn,:]


nn = 36


aa = sparse([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8], [0.6909919605821032, -0.27259360909626684, -2.53628717368683e-15, -26.45556000884485, -17.05911351808633, -0.25461959596982364, 0.13392857142856754, 7.04619863731337e-16, 10.195837547363936, 5.228985756735007, 0.24628104913305907, 0.08807182556648097, 0.5000000000000004, 5.791255979395697, 2.410844892168823, -0.49256209826611513, -0.17614365113296282, -3.3768393832643107e-16, -10.168772175270396, -3.2312325278764695, 0.007677688450912701, -0.0030288178788474914, -0.2939506667649496, -0.18954570575651816, -0.0024628104913305524, -0.0008807182556648164, -0.050843860876352225, -0.016156162639382483, -0.02462810491330557, -0.008807182556648158, -0.05, -0.5791255979395746, -0.24108448921688472], 35, 8) |> collect

aa = randn(3,3)

kron(aa,aa)

zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]





candidate_perms = Set{Tuple{Vector{Int64}, Vector{Int64}}}()
# length(perms)
for i in 1:1#size(zygkrondiff,1)
    ‚àÇkronaa = zeros(size(aa,1) * size(aa,2), size(aa,1) * size(aa,2))
    # ‚àÇkronaa = zero(mat1_rsh).*(zero(mat2_rsh).+1);
    # size(‚àÇkronaa)
    ‚àÇkronaa[i] = 1
    re‚àÇkronaa = reshape(‚àÇkronaa,size(aa,1),size(aa,2),size(aa,1) ,size(aa,2));

    perms = Set{Tuple{Vector{Int64}, Vector{Int64}}}()

    for perm in permutations(1:4)
        for perm2 in permutations(1:4)
            perm‚àÇkronaa = permutedims(re‚àÇkronaa, perm)
            perm‚àÇkronaa2 = permutedims(re‚àÇkronaa, perm2)
            result = reshape(perm‚àÇkronaa2, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)) * vec(aa) + reshape( perm‚àÇkronaa, size(aa,1)*size(aa,2), size(aa,1)*size(aa,2)) * vec(aa)
            # println(result)
            if result == zygkrondiff[nn,:] 
                push!(perms, (perm, perm2))
                # println("$i Permutation $perm, $perm2") 
            end
        end
    end
    if length(candidate_perms) == 0 
        for p in perms
            push!(candidate_perms, p)
        end
    else
        println(length(perms))
        intersect!(candidate_perms, perms)
    end
end

vec(aa)' * reshape(‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2))

using Combinatorics
perms = collect(permutations(1:4))
vec(aa)' * reshape(perm‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2))




aa = sparse([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8], [0.6909919605821032, -0.27259360909626684, -2.53628717368683e-15, -26.45556000884485, -17.05911351808633, -0.25461959596982364, 0.13392857142856754, 7.04619863731337e-16, 10.195837547363936, 5.228985756735007, 0.24628104913305907, 0.08807182556648097, 0.5000000000000004, 5.791255979395697, 2.410844892168823, -0.49256209826611513, -0.17614365113296282, -3.3768393832643107e-16, -10.168772175270396, -3.2312325278764695, 0.007677688450912701, -0.0030288178788474914, -0.2939506667649496, -0.18954570575651816, -0.0024628104913305524, -0.0008807182556648164, -0.050843860876352225, -0.016156162639382483, -0.02462810491330557, -0.008807182556648158, -0.05, -0.5791255979395746, -0.24108448921688472], 35, 8) |> collect

aa = randn(3,3)

kron(aa,aa)

zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]


using LinearAlgebra

for i in 1:size(zygkrondiff,1)
    ‚àÇkronaa = zeros(size(aa,1) * size(aa,2), size(aa,1) * size(aa,2))
    
    ‚àÇkronaa[i] = 1
    re‚àÇkronaa = reshape(‚àÇkronaa,size(aa,1),size(aa,1),size(aa,2) ,size(aa,2));
    result = zero(aa)
    
    ei = 1
    for e in eachslice(re‚àÇkronaa; dims = (2, 4))
        # result[ei] += dot(aa,e)
        result += dot.(aa,e)
        # push!(daa, dot(aa,e))
        ei += 1
    end

    ei = 1
    for e in eachslice(re‚àÇkronaa; dims = (1, 3))
        result[ei] += dot(aa,e)
        # push!(dab, dot(aa,e))
        ei += 1
    end
    # println(daa == dab)

    # result = daa + dab
    if !(vec(result) == zygkrondiff[i,:])
        println("$i failed")
        break
    else
        println("$i passed")
    end
    # println(result == zygkrondiff[i,:])
end


xÃÑ = @thunk(project_x(_dot_collect.(Ref(y), eachslice(dz; dims = (2, 4)))))
»≥ = @thunk(project_y(_dot_collect.(Ref(x), eachslice(dz; dims = (1, 3)))))





function _kron(mat1::AbstractMatrix,mat2::AbstractMatrix)
    m1, n1 = size(mat1)
    mat1_rsh = reshape(mat1,(1,m1,1,n1))

    m2, n2 = size(mat2)
    mat2_rsh = reshape(mat2,(m2,1,n2,1))

    return reshape(mat1_rsh.*mat2_rsh, (m1*m2,n1*n2))
end




function rrule(::typeof(_kron), mat1::AbstractMatrix,mat2::AbstractMatrix)

    function _kron_pullback(‚àÇkron) 
        ‚àÇmat1 = zero(mat1)
        ‚àÇmat2 = zero(mat2)

        re‚àÇkron = reshape(‚àÇkron,size(mat1,1),size(mat2,1),size(mat1,2) ,size(mat2,2));

        ei = 1
        for e in eachslice(re‚àÇkron; dims = (2, 4))
            ‚àÇmat1[ei] += dot(mat1,e)
            ei += 1
        end

        ei = 1
        for e in eachslice(re‚àÇkron; dims = (1, 3))
            ‚àÇmat2[ei] += dot(mat2,e)
            ei += 1
        end

        return NoTangent(), ‚àÇmat1, ‚àÇmat2
    end
    return kron(mat1,mat2), _kron_pullback
end


aa = sparse([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 4, 5, 1, 2, 4, 5, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8], [0.6909919605821032, -0.27259360909626684, -2.53628717368683e-15, -26.45556000884485, -17.05911351808633, -0.25461959596982364, 0.13392857142856754, 7.04619863731337e-16, 10.195837547363936, 5.228985756735007, 0.24628104913305907, 0.08807182556648097, 0.5000000000000004, 5.791255979395697, 2.410844892168823, -0.49256209826611513, -0.17614365113296282, -3.3768393832643107e-16, -10.168772175270396, -3.2312325278764695, 0.007677688450912701, -0.0030288178788474914, -0.2939506667649496, -0.18954570575651816, -0.0024628104913305524, -0.0008807182556648164, -0.050843860876352225, -0.016156162639382483, -0.02462810491330557, -0.008807182556648158, -0.05, -0.5791255979395746, -0.24108448921688472], 35, 8) |> collect

aa = randn(3,3)


MacroModelling._kron(aa,aa)
zygkrondifforig = Zygote.jacobian(x->kron(x,x),aa)[1]

zygkrondiff = Zygote.jacobian(x->MacroModelling._kron(x,x),aa)[1]

zygkrondiff1 = Zygote.jacobian(x->MacroModelling._kron(aa,x),aa)[1]

zygkrondiff2 = Zygote.jacobian(x->MacroModelling._kron(x,aa),aa)[1]

zygkrondiff - zygkrondiff1 - zygkrondiff2


isapprox(zygkrondifforig, zygkrondiff)

perm‚àÇkronaa = permutedims(re‚àÇkronaa, perms[1])
perm‚àÇkronaa2 = permutedims(re‚àÇkronaa, perms[4])
result = (vec(aa)' * (reshape(perm‚àÇkronaa2, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2)) + reshape( perm‚àÇkronaa, size(aa,1)*size(aa,2), size(aa,1)*size(aa,2))))
zygkrondiff[nn,:] 

# aa = randn(3,2)


function _kron(mat1::AbstractMatrix,mat2::AbstractMatrix)
    m1, n1 = size(mat1)
    mat1_rsh = reshape(mat1,(1,m1,1,n1))

    m2, n2 = size(mat2)
    mat2_rsh = reshape(mat2,(m2,1,n2,1))

    return reshape(mat1_rsh.*mat2_rsh, (m1*m2,n1*n2))
end


_kron(aa,aa)


m1, n1 = size(aa)
mat1_rsh = reshape(aa,(1,m1,1,n1))

m2, n2 = size(aa)
mat2_rsh = reshape(aa,(m2,1,n2,1))

kronaa = reshape(mat1_rsh.*mat2_rsh, (m1*m2,n1*n2))

‚àÇkronaa = zero(kron(aa,aa))
# ‚àÇkronaa = zero(mat1_rsh).*(zero(mat2_rsh).+1);
# size(‚àÇkronaa)
‚àÇkronaa[1] = 1

vec(aa)' * reshape(‚àÇkronaa, size(aa,1)*size(aa,2),size(aa,1) *size(aa,2))


reshape(reshape(‚àÇkronaa .* mat2_rsh, m1*m2,n1*n2),6,6)


mat1_rsh0 = zero(mat1_rsh)
mat1_rsh0[2] = 1
‚àÇkronaa += mat1_rsh0.*(zero(mat2_rsh).+1)
‚àÇkronaa[1] = 1

zygkrondiff = Zygote.jacobian(x->x .* mat2_rsh,mat1_rsh)[1]

zygkrondiff = Zygote.jacobian(x->x .* mat1_rsh,mat2_rsh)[1]

reshape(reshape(‚àÇkronaa .* mat2_rsh, m1*m2,n1*n2),6,6)

‚àÇkronaa * mat2_rsh'

‚àÇkronaa = zero(mat1_rsh).*(zero(mat2_rsh).+1)
‚àÇkronaa[4] = 1

vec(mat2_rsh)' * reshape(‚àÇkronaa,6,6)


# forward diff
kron(x,x)

# derivative of kron(x,x) wrt x

# reverse mode AD
# derivative of x wrt to kron(x,x)



‚àÇkronaa = zero(kron(aa,aa))
# ‚àÇkronaa[1,1] = 1
# ‚àÇkronaa[1,2] = 1
‚àÇkronaa[2,1] = 1


# ‚àÇkronaa .* mat1_rsh

grad_mat1_rsh = reshape(‚àÇkronaa, (m2, m1, n2, n1)) .* reshape(aa, (m2, 1, n2, 1))

grad_aa_1 = sum(grad_mat1_rsh, dims=(2, 4))
grad_aa_2 = sum(grad_mat1_rsh, dims=(1, 3))



zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]




vec(mat1_rsh .* mat2_rsh)

using SparseArrays
aa = sprand(10,5,.2)

kron(aa,aa)

zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]

@profview zygkrondiff = Zygote.jacobian(x->kron(x,x),aa)[1]


zygkrondiff
reshape(‚àÇkronaa,6,6) * vec(aa)


reshape(kron(vec(aa),vec(aa)),4,9)'


vec(kron(aa,aa)) - vec(kron(vec(aa')',vec(aa')'))

difff = sparse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 23, 64)

droptol!(difff,eps())




SS_and_pars, (solution_error, iters) = get_NSSS_and_parameters(ùìÇ, parameters, verbose = verbose)
    
all_SS = expand_steady_state(SS_and_pars,ùìÇ)

‚àá‚ÇÅ = calculate_jacobian(parameters, SS_and_pars, ùìÇ)# |> Matrix

‚àá‚ÇÇ = calculate_hessian(parameters, SS_and_pars, ùìÇ)
    
par_hess = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_hessian(x, SS_and_pars, ùìÇ), parameters)[1]
    
SS_hess = FiniteDifferences.jacobian(FiniteDifferences.central_fdm(3,1),
                            x -> calculate_hessian(parameters, x, ùìÇ), SS_and_pars)[1]
                            
hcat(par_hess,SS_hess)' |>sparse |>findnz
analytical_hess_SS_and_pars_vars    |> findnz  

maximum(hcat(par_hess,SS_hess)' - analytical_hess_SS_and_pars_vars)

sparse(hcat(SS_hess,par_hess))    |> findnz                  
sparse(hcat(SS_hess,par_hess)).nzval .|> Float32|> unique |> sort

ùìÇ.model_hessian_SS_and_pars_vars[2].nzval .|> Float32 |> unique |> sort
ùìÇ.model_hessian_SS_and_pars_vars[2]
# if !solved return -Inf end



SS_hess_zyg = Zygote.jacobian(x -> calculate_hessian(parameters, x, ùìÇ), SS_and_pars)[1]
isapprox(SS_hess, SS_hess_zyg)                      
# if collect(axiskeys(data,1)) isa Vector{String}
#     data = @ignore_derivatives rekey(data, 1 => axiskeys(data,1) .|> Meta.parse .|> replace_indices)
# end

# dt = @ignore_derivatives collect(data(observables))

# # prepare data
# data_in_deviations = dt .- SS_and_pars[obs_indices]
