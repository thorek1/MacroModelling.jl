using Revise
using MacroModelling
using BenchmarkTools
import MacroModelling: get_NSSS_and_parameters, calculate_jacobian, calculate_quadratic_iteration_solution, calculate_linear_time_iteration_solution, timings, solve_quadratic_matrix_equation #, calculate_doubling_solution, riccati_forward, calculate_first_order_solution
import LinearAlgebra as ‚Ñí
using SpeedMapping

using TimerOutputs
TimerOutputs.enable_debug_timings(MacroModelling)

# TimerOutputs.enable_debug_timings(Main)


include("../models/RBC_baseline.jl")

sims = simulate(RBC_baseline)

get_loglikelihood(RBC_baseline, sims[[1,6],:,1], RBC_baseline.parameter_values)

import Zygote, FiniteDifferences, ForwardDiff

@benchmark zygdiff = Zygote.gradient(x -> get_loglikelihood(RBC_baseline, sims[[1,6],:,1], x), RBC_baseline.parameter_values)[1]
@benchmark findiff = FiniteDifferences.grad(FiniteDifferences.central_fdm(3,1), x -> get_loglikelihood(RBC_baseline, sims[[1,6],:,1], x), RBC_baseline.parameter_values)[1]
@benchmark fordiff = ForwardDiff.gradient(x -> get_loglikelihood(RBC_baseline, sims[[1,6],:,1], x), RBC_baseline.parameter_values)


# include("../models/Smets_Wouters_2007.jl")


include("../models/NAWM_EAUS_2008.jl")

ùìÇ = NAWM_EAUS_2008

parameter_values = ùìÇ.parameter_values

SS_and_pars, (solution_error, iters) = get_NSSS_and_parameters(ùìÇ, parameter_values, verbose = true)

‚àá‚ÇÅ = calculate_jacobian(parameter_values, SS_and_pars, ùìÇ)# |> Matrix

T = ùìÇ.timings

sol = calculate_first_order_solution(‚àá‚ÇÅ; T = T)

sol2 = calculate_first_order_solution(‚àá‚ÇÅ; T = T)

sol2 = calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :doubling)

calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :linear_time_iteration, verbose = true)

calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :quadratic_iteration, verbose = true)

@profview for i in 1:10 calculate_first_order_solution(‚àá‚ÇÅ; T = T) end

@profview for i in 1:10 calculate_first_order_solution(‚àá‚ÇÅ; T = T) end

@profview for i in 1:100 calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :doubling) end

@profview for i in 1:10 calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :linear_time_iteration) end

@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T)

@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :doubling)

@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :schur)

@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :linear_time_iteration)

@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :quadratic_iteration)


timer = TimerOutput()
for i in 1:100 calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :schur, timer = timer) end
timer

timer = TimerOutput()
for i in 1:100 calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :doubling, timer = timer) end
timer

timer = TimerOutput()
for i in 1:10 calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :linear_time_iteration, timer = timer) end
timer


isapprox(sol[1], sol2[1], rtol = 1e-10)


soll,_ = riccati_forward(‚àá‚ÇÅ; T = T)
soll *=  expand[2]





dynIndex = T.nPresent_only+1:T.nVars

reverse_dynamic_order = indexin([T.past_not_future_idx; T.future_not_past_and_mixed_idx], T.present_but_not_only_idx)

comb = union(T.future_not_past_and_mixed_idx, T.past_not_future_idx)
sort!(comb)

future_not_past_and_mixed_in_comb = indexin(T.future_not_past_and_mixed_idx, comb)
past_not_future_and_mixed_in_comb = indexin(T.past_not_future_and_mixed_idx, comb)

A‚Çä = zeros(T.nVars, T.nFuture_not_past_and_mixed)
A‚ÇÄ = zeros(T.nVars, T.nVars)
A‚Çã = zeros(T.nVars, T.nPast_not_future_and_mixed)
n‚Çö‚Çã = zeros(T.nPresent_only, T.nPast_not_future_and_mixed)
M = similar(A‚ÇÄ)

‚àá‚Çä = @view ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed]
‚àá‚ÇÄ = ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1, T.nVars)]    
‚àá‚Çã = @view ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1, T.nPast_not_future_and_mixed)]
‚àá‚Çë = copy(‚àá‚ÇÅ[:,(T.nFuture_not_past_and_mixed + T.nVars + T.nPast_not_future_and_mixed + 1):end])

Q    = @views ‚Ñí.factorize(‚àá‚ÇÄ[:,T.present_only_idx])
# Q    = ‚Ñí.qr!(‚àá‚ÇÄ[:,T.present_only_idx])
Qinv = Q.Q'

‚Ñí.mul!(A‚Çä, Qinv, ‚àá‚Çä)
‚Ñí.mul!(A‚ÇÄ, Qinv, ‚àá‚ÇÄ)
‚Ñí.mul!(A‚Çã, Qinv, ‚àá‚Çã)

AÃÉ‚Çä = @views A‚Çä[dynIndex,:] * ‚Ñí.I(length(comb))[future_not_past_and_mixed_in_comb,:]
AÃÉ‚ÇÄ = @views A‚ÇÄ[dynIndex, comb]
AÃÉ‚Çã = @views A‚Çã[dynIndex,:] * ‚Ñí.I(length(comb))[past_not_future_and_mixed_in_comb,:]




A = AÃÉ‚Çä
B = AÃÉ‚ÇÄ
C = AÃÉ‚Çã

BÃÇ =  ‚Ñí.lu(B)

CÃÑ = BÃÇ \ C
AÃÑ = BÃÇ \ A

X = similar(AÃÑ)
XÃÑ = similar(AÃÑ)

X¬≤ = similar(X)

sol = speedmapping(zero(A); m! = (XÃÑ, X) -> begin 
                                            ‚Ñí.mul!(X¬≤, X, X)
                                            ‚Ñí.mul!(XÃÑ, AÃÑ, X¬≤)
                                            ‚Ñí.axpy!(1, CÃÑ, XÃÑ)
                                        end,
    tol = tol, maps_limit = 50000, œÉ_min = 1, stabilize = true, orders = [3,2])


X = -sol.minimizer

A * X * X + B * X + C

AÃÑ * X * X + CÃÑ + X

reached_tol = ‚Ñí.norm(A * X * X + B * X + C)

converged = reached_tol < tol



maxiter = 10000
tol = 1e-8

F = similar(C)
F¬≤ = similar(C)
t = similar(C)
Œµ = similar(C)

verbose = true

for i in 1:maxiter
    # copy!(t‚ÇÅ,B)
    # ‚Ñí.mul!(t‚ÇÅ, A, F, 1, 1)
    ‚Ñí.mul!(T, A, F)
    ‚Ñí.axpby!(-1, B, -1, T)
    TÃÇ = ‚Ñí.lu!(T, check = false)
    ‚Ñí.ldiv!(F, TÃÇ, C)

    ‚Ñí.mul!(F¬≤, F, F)
    ‚Ñí.mul!(Œµ, A, F¬≤)
    ‚Ñí.mul!(Œµ, B, F, 1, 1)
    ‚Ñí.axpy!(1, C, Œµ)
    println("Residual norm: $(‚Ñí.norm(Œµ))")
    if ‚Ñí.norm(Œµ) < tol 
        if verbose println("Converged in $i iterations to residual norm: $(‚Ñí.norm(Œµ))") end
        break 
    end
end

sol = speedmapping(zero(A); m! = (FÃÑ, F) -> begin 
            ‚Ñí.mul!(t, A, F)
            ‚Ñí.axpby!(-1, B, -1, t)
            tÃÇ = ‚Ñí.lu!(t, check = false)
            ‚Ñí.ldiv!(FÃÑ, tÃÇ, C)
        end,
    tol = tol, maps_limit = 1000)

sol.minimizer

BÃÇ =  ‚Ñí.lu(B)

AA = BÃÇ \ C
BB = BÃÇ \ A

X = similar(AA)
XÃÑ = similar(AA)

X¬≤ = similar(X)

sol = speedmapping(zero(A); m! = (XÃÑ, X) -> begin 
                                            ‚Ñí.mul!(X¬≤, X, X)
                                            ‚Ñí.mul!(XÃÑ, BB, X¬≤)
                                            ‚Ñí.axpy!(1, AA, XÃÑ)
                                        end,
    tol = 1e-8, maps_limit = 1000)#, œÉ_min = 0.0, stabilize = false, orders = [3,3,2])






    # see Binder and Pesaran (1997) for more details on this approach
    expand = @views [‚Ñí.I(T.nVars)[T.future_not_past_and_mixed_idx,:],
            ‚Ñí.I(T.nVars)[T.past_not_future_and_mixed_idx,:]] 

    ‚àá‚Çä = @views ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed] * expand[1]
    ‚àá‚ÇÄ = @views ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1,T.nVars)]
    ‚àá‚Çã = @views ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1,T.nPast_not_future_and_mixed)] * expand[2]
    ‚àá‚Çë = @views ‚àá‚ÇÅ[:,(T.nFuture_not_past_and_mixed + T.nVars + T.nPast_not_future_and_mixed + 1):end]
    
    ‚àáÃÇ‚ÇÄ =  ‚Ñí.lu(‚àá‚ÇÄ)
    
    A = ‚àáÃÇ‚ÇÄ \ ‚àá‚Çã
    B = ‚àáÃÇ‚ÇÄ \ ‚àá‚Çä

    C = similar(A)
    CÃÑ = similar(A)

    E = similar(C)

    sol = speedmapping(zero(A); m! = (CÃÑ, C) -> begin 
                                                ‚Ñí.mul!(E, C, C)
                                                ‚Ñí.mul!(CÃÑ, B, E)
                                                ‚Ñí.axpy!(1, A, CÃÑ)
                                            end,
                                            # CÃÑ .=  A + B * C^2, 
        tol = tol, maps_limit = 10000)


    C = -sol.minimizer

sol = solve_quadratic_matrix_equation(AÃÉ‚Çä, AÃÉ‚ÇÄ, AÃÉ‚Çã, 
                                        Val(:doubling), 
                                        T, 
                                        # timer = timer,
                                        verbose = true)

D = sol[length(T.not_mixed_in_past_idx)+1:end,past_not_future_and_mixed_in_comb]
L = ‚Ñí.I(length(past_not_future_and_mixed_in_comb))[:,T.not_mixed_in_past_idx] * sol[1:length(T.not_mixed_in_past_idx),past_not_future_and_mixed_in_comb]

LL - L
AÃÑ‚ÇÄ·µ§  = @view A‚ÇÄ[1:T.nPresent_only, T.present_only_idx]
A‚Çä·µ§  = @view A‚Çä[1:T.nPresent_only,:]
AÃÉ‚ÇÄ·µ§  = A‚ÇÄ[1:T.nPresent_only, T.present_but_not_only_idx]
A‚Çã·µ§  = A‚Çã[1:T.nPresent_only,:]

AÃÑÃÇ‚ÇÄ·µ§ = ‚Ñí.lu!(AÃÑ‚ÇÄ·µ§, check = false)

# A    = vcat(-(AÃÑÃÇ‚ÇÄ·µ§ \ (A‚Çä·µ§ * D * L + AÃÉ‚ÇÄ·µ§ * sol[T.dynamic_order,:] + A‚Çã·µ§)), sol)
‚Ñí.mul!(A‚Çã·µ§, AÃÉ‚ÇÄ·µ§, sol[:,past_not_future_and_mixed_in_comb], 1, 1)
‚Ñí.mul!(n‚Çö‚Çã, A‚Çä·µ§, D)
‚Ñí.mul!(A‚Çã·µ§, n‚Çö‚Çã, L, 1, 1)








n‚ÇÄ‚Çä = zeros(T.nVars, T.nFuture_not_past_and_mixed)
n‚ÇÄ‚ÇÄ = zeros(T.nVars, T.nVars)
n‚ÇÄ‚Çã = zeros(T.nVars, T.nPast_not_future_and_mixed)
n‚Çã‚Çã = zeros(T.nPast_not_future_and_mixed, T.nPast_not_future_and_mixed)
n‚Çö‚Çã = zeros(T.nPresent_only, T.nPast_not_future_and_mixed)
n‚Çú‚Çö = zeros(T.nVars - T.nPresent_only, T.nPast_not_future_and_mixed)

‚àá‚Çä = @view ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed]
‚àá‚ÇÄ = ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1, T.nVars)]
‚àá‚Çã = @view ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1, T.nPast_not_future_and_mixed)]

Q    = @views ‚Ñí.factorize(‚àá‚ÇÄ[:,T.present_only_idx])
# Q    = ‚Ñí.qr!(‚àá‚ÇÄ[:,T.present_only_idx])
Qinv = Q.Q'

‚Ñí.mul!(n‚ÇÄ‚Çä, Qinv, ‚àá‚Çä)
‚Ñí.mul!(n‚ÇÄ‚ÇÄ, Qinv, ‚àá‚ÇÄ)
‚Ñí.mul!(n‚ÇÄ‚Çã, Qinv, ‚àá‚Çã)
A‚Çä = n‚ÇÄ‚Çä
A‚ÇÄ = n‚ÇÄ‚ÇÄ
A‚Çã = n‚ÇÄ‚Çã

AÃÉ‚Çä  = A‚Çä[dynIndex,:]
AÃÉ‚Çã  = A‚Çã[dynIndex,:]
AÃÉ‚ÇÄ‚Çä = A‚ÇÄ[dynIndex, T.future_not_past_and_mixed_idx]
@views ‚Ñí.mul!(n‚Çú‚Çö, A‚ÇÄ[dynIndex, T.past_not_future_idx], ‚Ñí.I(T.nPast_not_future_and_mixed)[T.not_mixed_in_past_idx,:])
AÃÉ‚ÇÄ‚Çã = n‚Çú‚Çö

Z‚Çä = zeros(T.nMixed, T.nFuture_not_past_and_mixed)
I‚Çä = ‚Ñí.I(T.nFuture_not_past_and_mixed)[T.mixed_in_future_idx,:]

Z‚Çã = zeros(T.nMixed,T.nPast_not_future_and_mixed)
I‚Çã = ‚Ñí.diagm(ones(T.nPast_not_future_and_mixed))[T.mixed_in_past_idx,:]

D = vcat(hcat(AÃÉ‚ÇÄ‚Çã, AÃÉ‚Çä), hcat(I‚Çã, Z‚Çä))

‚Ñí.rmul!(AÃÉ‚Çã,-1)
‚Ñí.rmul!(AÃÉ‚ÇÄ‚Çä,-1)
E = vcat(hcat(AÃÉ‚Çã,AÃÉ‚ÇÄ‚Çä), hcat(Z‚Çã, I‚Çä))

# this is the companion form and by itself the linearisation of the matrix polynomial used in the linear time iteration method. see: https://opus4.kobv.de/opus4-matheon/files/209/240.pdf
schdcmp = ‚Ñí.schur!(D, E)

eigenselect = abs.(schdcmp.Œ≤ ./ schdcmp.Œ±) .< 1

‚Ñí.ordschur!(schdcmp, eigenselect)

Z‚ÇÇ‚ÇÅ = schdcmp.Z[T.nPast_not_future_and_mixed+1:end, 1:T.nPast_not_future_and_mixed]
Z‚ÇÅ‚ÇÅ = @view schdcmp.Z[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]

S‚ÇÅ‚ÇÅ    = @view schdcmp.S[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]
T‚ÇÅ‚ÇÅ    = schdcmp.T[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]

ZÃÇ‚ÇÅ‚ÇÅ = ‚Ñí.lu(Z‚ÇÅ‚ÇÅ, check = false)

SÃÇ‚ÇÅ‚ÇÅ = ‚Ñí.lu!(S‚ÇÅ‚ÇÅ, check = false)

# D      = Z‚ÇÇ‚ÇÅ / ZÃÇ‚ÇÅ‚ÇÅ
‚Ñí.rdiv!(Z‚ÇÇ‚ÇÅ, ZÃÇ‚ÇÅ‚ÇÅ)
D = Z‚ÇÇ‚ÇÅ

# L      = Z‚ÇÅ‚ÇÅ * (SÃÇ‚ÇÅ‚ÇÅ \ T‚ÇÅ‚ÇÅ) / ZÃÇ‚ÇÅ‚ÇÅ
‚Ñí.ldiv!(SÃÇ‚ÇÅ‚ÇÅ, T‚ÇÅ‚ÇÅ)
‚Ñí.mul!(n‚Çã‚Çã, Z‚ÇÅ‚ÇÅ, T‚ÇÅ‚ÇÅ)
‚Ñí.rdiv!(n‚Çã‚Çã, ZÃÇ‚ÇÅ‚ÇÅ)
LL = n‚Çã‚Çã


sol = vcat(LL[T.not_mixed_in_past_idx,:], D)


# @benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T)

# @benchmark calculate_quadratic_iteration_solution(‚àá‚ÇÅ; T = T)

# @benchmark calculate_linear_time_iteration_solution(‚àá‚ÇÅ; T = T)

expand = @views [‚Ñí.I(T.nVars)[T.future_not_past_and_mixed_idx,:],
‚Ñí.I(T.nVars)[T.past_not_future_and_mixed_idx,:]] 


n‚Çú‚Çö = zeros(T.nVars - T.nPresent_only, T.nPast_not_future_and_mixed)

‚àá‚Çä = @views ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed] * expand[1]
‚àá‚ÇÄ = @views ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1,T.nVars)]
‚àá‚Çã = @views ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1,T.nPast_not_future_and_mixed)] * expand[2]

A = ‚àá‚Çä
B = ‚àá‚ÇÄ
C = ‚àá‚Çã

# B = ‚àá‚ÇÄ[:,T.present_only_idx]

BÃÇ = ‚Ñí.factorize(B)

# Compute initial values X0, Y0, E0, F0
E0 = BÃÇ \ C
F0 = BÃÇ \ A
X0 = -E0
Y0 = -F0

# Define the structure-preserving doubling algorithm

timer = TimerOutput()
for i in 1:100 calculate_doubling_solution(X0, Y0, E0, F0, timer = timer) end
timer

X_sol = calculate_doubling_solution2(X0, Y0, E0, F0)

check = A * X_sol^2 + B * X_sol + C;
println("Norm of the residual: $(‚Ñí.norm(check))")  # Should be close to zero

check = A * soll^2 + B * soll + C;
println("Norm of the residual: $(‚Ñí.norm(check))")  # Should be close to zero

# soll2 = calculate_linear_time_iteration_solution(‚àá‚ÇÅ; T = T)
# soll2 * expand[2]
check = A * soll^2 + B * soll + C;
println("Norm of the residual: $(‚Ñí.norm(check))")  # Should be close to zero

println("Norm of the residual: $(‚Ñí.norm(check) / ‚Ñí.norm(C))")  # Should be close to zero

check = B \ A * soll^2 + soll + B \ C;

check = B \ A * X_sol^2 + X_sol + B \ C;

println("Norm of the residual: $(‚Ñí.norm(check) / ‚Ñí.norm(X_sol))")  # Should be close to zero

‚Ñí.norm(soll-X_sol) / max(‚Ñí.norm(soll), ‚Ñí.norm(X_sol))

‚Ñí.norm(soll2 - X_sol) / max(‚Ñí.norm(soll2), ‚Ñí.norm(X_sol))

# Run the algorithm
@benchmark X_sol = calculate_doubling_solution(X0, Y0, E0, F0)
@profview for i in 1:100 X_sol = calculate_doubling_solution(X0, Y0, E0, F0) end

# Verify that the solution satisfies the original quadratic equation from 1.1
check = A * X_sol^2 + B * X_sol + C
println("Norm of the residual: $(‚Ñí.norm(check))")  # Should be close to zero





n‚ÇÄ‚Çä = zeros(T.nVars, T.nFuture_not_past_and_mixed)
n‚ÇÄ‚ÇÄ = zeros(T.nVars, T.nVars)
n‚ÇÄ‚Çã = zeros(T.nVars, T.nPast_not_future_and_mixed)
n‚Çã‚Çã = zeros(T.nPast_not_future_and_mixed, T.nPast_not_future_and_mixed)
n‚Çö‚Çã = zeros(T.nPresent_only, T.nPast_not_future_and_mixed)
n‚Çú‚Çö = zeros(T.nVars - T.nPresent_only, T.nPast_not_future_and_mixed)

‚àá‚Çä = @view ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed]
‚àá‚ÇÄ = ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1, T.nVars)]
‚àá‚Çã = @view ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1, T.nPast_not_future_and_mixed)]

Q    = @views ‚Ñí.factorize(‚àá‚ÇÄ[:,T.present_only_idx])
# Q    = ‚Ñí.qr!(‚àá‚ÇÄ[:,T.present_only_idx])
Qinv = Q.Q'

‚Ñí.mul!(n‚ÇÄ‚Çä, Qinv, ‚àá‚Çä)
‚Ñí.mul!(n‚ÇÄ‚ÇÄ, Qinv, ‚àá‚ÇÄ)
‚Ñí.mul!(n‚ÇÄ‚Çã, Qinv, ‚àá‚Çã)
A‚Çä = n‚ÇÄ‚Çä
A‚ÇÄ = n‚ÇÄ‚ÇÄ
A‚Çã = n‚ÇÄ‚Çã

dynIndex = T.nPresent_only+1:T.nVars

AÃÉ‚Çä  = A‚Çä[dynIndex,:]
AÃÉ‚Çã  = A‚Çã[dynIndex,:]
AÃÉ‚ÇÄ‚Çä = A‚ÇÄ[dynIndex, T.future_not_past_and_mixed_idx]
@views ‚Ñí.mul!(n‚Çú‚Çö, A‚ÇÄ[dynIndex, T.past_not_future_idx], ‚Ñí.I(T.nPast_not_future_and_mixed)[T.not_mixed_in_past_idx,:])
AÃÉ‚ÇÄ‚Çã = n‚Çú‚Çö


comb = union(T.past_not_future_and_mixed_idx, T.future_not_past_and_mixed_idx)

T.nPast_not_future_and_mixed


‚àá‚Çä = @view ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed]
‚àá‚ÇÄ = ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1, T.nVars)]
‚àá‚Çã = @view ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1, T.nPast_not_future_and_mixed)]

Q    = @views ‚Ñí.factorize(‚àá‚ÇÄ[:,T.present_only_idx])
# Q    = ‚Ñí.qr!(‚àá‚ÇÄ[:,T.present_only_idx])
Qinv = Q.Q'

‚Ñí.mul!(n‚ÇÄ‚Çä, Qinv, ‚àá‚Çä)
‚Ñí.mul!(n‚ÇÄ‚ÇÄ, Qinv, ‚àá‚ÇÄ)
‚Ñí.mul!(n‚ÇÄ‚Çã, Qinv, ‚àá‚Çã)
A‚Çä = n‚ÇÄ‚Çä
A‚ÇÄ = n‚ÇÄ‚ÇÄ
A‚Çã = n‚ÇÄ‚Çã



T.future_not_past_and_mixed_idx

AÃÉ‚Çä  = hcat(A‚Çä[dynIndex,:], zeros(T.nVars - T.nPresent_only, length(comb) - T.nFuture_not_past_and_mixed))
AÃÉ‚ÇÄ = A‚ÇÄ[dynIndex, sort(union(T.future_not_past_and_mixed_idx, T.past_not_future_idx))]
AÃÉ‚Çã  = hcat(A‚Çã[dynIndex,:], zeros(T.nVars - T.nPresent_only, length(comb) - T.nPast_not_future_and_mixed))



comb = union(T.future_not_past_and_mixed_idx, T.past_not_future_idx)
sort!(comb)
# T.past_not_future_and_mixed_idx
# ‚Ñí.I(length(comb))[indices_past_not_future_and_mixed_in_comb,:]

indices_past_not_future_and_mixed_in_comb = findall(x -> x in T.past_not_future_and_mixed_idx, comb)


AÃÉ‚Çã = A‚Çã[dynIndex,:] * ‚Ñí.I(length(comb))[indices_past_not_future_and_mixed_in_comb,:]

indices_future_not_past_and_mixed_in_comb = findall(x -> x in T.future_not_past_and_mixed_idx, comb)

AÃÉ‚Çä  = A‚Çä[dynIndex,:] * ‚Ñí.I(length(comb))[indices_future_not_past_and_mixed_in_comb,:]


# T.nPast_not_future_and_mixed
A = AÃÉ‚Çä
B = AÃÉ‚ÇÄ
C = AÃÉ‚Çã

# B = ‚àá‚ÇÄ[:,T.present_only_idx]

BÃÇ = ‚Ñí.factorize(B)

# Compute initial values X0, Y0, E0, F0
E0 = BÃÇ \ C
F0 = BÃÇ \ A
X0 = -E0
Y0 = -F0




@benchmark X_sol = calculate_doubling_solution2(X0, Y0, E0, F0)

check = A * X_sol^2 + B * X_sol + C
println("Norm of the residual: $(‚Ñí.norm(check))")  # Should be close to zero


isapprox(X_sol[:,indices_past_not_future_and_mixed_in_comb], sol[T.dynamic_order,:], rtol = 1e-10)
sparse(X_sol)

X_sol[:, vec(sum(abs, X_sol; dims=1) .> 0)]

Z‚Çä = zeros(T.nMixed, T.nFuture_not_past_and_mixed)
I‚Çä = ‚Ñí.I(T.nFuture_not_past_and_mixed)[T.mixed_in_future_idx,:]

Z‚Çã = zeros(T.nMixed,T.nPast_not_future_and_mixed)
I‚Çã = ‚Ñí.diagm(ones(T.nPast_not_future_and_mixed))[T.mixed_in_past_idx,:]

D = vcat(hcat(AÃÉ‚ÇÄ‚Çã, AÃÉ‚Çä), hcat(I‚Çã, Z‚Çä))

‚Ñí.rmul!(AÃÉ‚Çã,-1)
‚Ñí.rmul!(AÃÉ‚ÇÄ‚Çä,-1)
E = vcat(hcat(AÃÉ‚Çã,AÃÉ‚ÇÄ‚Çä), hcat(Z‚Çã, I‚Çä))





X0 * Y0
Y0 * X0

function calculate_doubling_solution2(X0, Y0, E0, F0; 
    tol=eps(),
    timer::TimerOutput = TimerOutput(),
    max_iter=100)
    @timeit_debug timer "Setup buffers" begin

    X = copy(X0)
    Y = copy(Y0)
    E = copy(E0) 
    F = copy(F0)

    X_new = similar(X0)
    Y_new = similar(Y0)
    E_new = similar(E0) 
    F_new = similar(F0)
    
    temp1 = similar(Y)  # Temporary for intermediate operations
    # temp2 = similar(Y)  # Temporary for intermediate operations
    n = size(X, 1)
    II = ‚Ñí.I(n)  # Temporary for identity matrix

    Xtol = 1.0
    Ytol = 1.0

    end # timeit_debug
    @timeit_debug timer "Loop" begin

    for i in 1:max_iter
        @timeit_debug timer "Compute EI" begin

        # Compute EI = I - Y * X
        # ‚Ñí.rmul!(temp1, 0)
        # @simd for j in 1:n
        #     @inbounds temp1[j, j] = 1
        # end
        # copy!(temp1, II)
        # ‚Ñí.mul!(temp1, Y, X, -1, 1)
        ‚Ñí.mul!(temp1, Y, X)
        ‚Ñí.axpby!(1, II, -1, temp1)

        end # timeit_debug
        @timeit_debug timer "Invert EI" begin

        fEI = ‚Ñí.lu(temp1, check = false)

        end # timeit_debug
        @timeit_debug timer "Compute E" begin

        # Compute E = E * EI * E
        ‚Ñí.ldiv!(temp1, fEI, E)
        ‚Ñí.mul!(E_new, E, temp1)

        end # timeit_debug
        @timeit_debug timer "Compute FI" begin
            
        # Compute FI = I - X * Y
        # ‚Ñí.rmul!(temp1, 0)
        # @simd for j in 1:n
        #     @inbounds temp1[j, j] = 1
        # end
        copy!(temp1, II)
        ‚Ñí.mul!(temp1, X, Y, -1, 1)
        # ‚Ñí.mul!(temp1, X, Y)
        # ‚Ñí.axpby!(1, II, -1, temp1)

        end # timeit_debug
        @timeit_debug timer "Invert FI" begin

        fFI = ‚Ñí.lu(temp1, check = false)
        
        end # timeit_debug
        @timeit_debug timer "Compute F" begin
        
        # Compute F = F * FI * F
        ‚Ñí.ldiv!(temp1, fFI, F)
        ‚Ñí.mul!(F_new, F, temp1)

        end # timeit_debug
        @timeit_debug timer "Compute X_new" begin
    
        # Compute X_new = X + F * FI * X * E
        ‚Ñí.mul!(X_new, X, E)
        ‚Ñí.ldiv!(temp1, fFI, X_new)
        ‚Ñí.mul!(X_new, F, temp1)
        if i > 0 Xtol = ‚Ñí.norm(X_new) end
        ‚Ñí.axpy!(1, X, X_new)

        end # timeit_debug
        @timeit_debug timer "Compute Y_new" begin

        # Compute Y_new = Y + E * EI * Y * F
        ‚Ñí.mul!(Y_new, Y, F)
        ‚Ñí.ldiv!(temp1, fEI, Y_new)
        ‚Ñí.mul!(Y_new, E, temp1)
        if i > 0 Ytol = ‚Ñí.norm(Y_new) end
        ‚Ñí.axpy!(1, Y, Y_new)
        
        println("Iter: $i; xtol: $(‚Ñí.norm(X_new - X)); ytol: $(‚Ñí.norm(Y_new - Y))")

        # Check for convergence
        if Xtol < tol && Ytol < tol
            println("Converged in $i iterations.")
            break
        end

        end # timeit_debug
        @timeit_debug timer "Copy" begin

        # Update values for the next iteration
        copy!(X, X_new)
        copy!(Y, Y_new)
        copy!(E, E_new)
        copy!(F, F_new)
        end # timeit_debug
    end
    end # timeit_debug

    return X_new  # Converged to solution
end



X_sol = calculate_doubling_solution2(X0, Y0, E0, F0)

check = A * X_sol^2 + B * X_sol + C
println("Norm of the residual: $(‚Ñí.norm(check)/‚Ñí.norm(C))")  # Should be close to zero


sparse(X_sol)

‚àá‚ÇÅ = calculate_jacobian(parameter_values, SS_and_pars, ùìÇ)# |> Matrix

T = ùìÇ.timings

expand = @views [‚Ñí.I(T.nVars)[T.future_not_past_and_mixed_idx,:],
‚Ñí.I(T.nVars)[T.past_not_future_and_mixed_idx,:]] 

‚àá‚Çä = @views ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed] * expand[1]
‚àá‚ÇÄ = @views ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1,T.nVars)]
‚àá‚Çã = @views ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1,T.nPast_not_future_and_mixed)] * expand[2]

A = ‚àá‚Çä
B = ‚àá‚ÇÄ
C = ‚àá‚Çã

BÃÇ = ‚Ñí.factorize(B)
# Compute initial values X0, Y0, E0, F0
E0 = BÃÇ \ C
F0 = BÃÇ \ A
X0 = -E0
Y0 = -F0




n‚ÇÄ‚Çä = zeros(T.nVars, T.nFuture_not_past_and_mixed)
n‚ÇÄ‚ÇÄ = zeros(T.nVars, T.nVars)
n‚ÇÄ‚Çã = zeros(T.nVars, T.nPast_not_future_and_mixed)
n‚Çã‚Çã = zeros(T.nPast_not_future_and_mixed, T.nPast_not_future_and_mixed)
n‚Çö‚Çã = zeros(T.nPresent_only, T.nPast_not_future_and_mixed)
n‚Çú‚Çö = zeros(T.nVars - T.nPresent_only, T.nPast_not_future_and_mixed)

‚àá‚Çä = @view ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed]
‚àá‚ÇÄ = ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1, T.nVars)]
‚àá‚Çã = @view ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1, T.nPast_not_future_and_mixed)]

Q    = @views ‚Ñí.factorize(‚àá‚ÇÄ[:,T.present_only_idx])
# Q    = ‚Ñí.qr!(‚àá‚ÇÄ[:,T.present_only_idx])
Qinv = Q.Q'

‚Ñí.mul!(n‚ÇÄ‚Çä, Qinv, ‚àá‚Çä)
‚Ñí.mul!(n‚ÇÄ‚ÇÄ, Qinv, ‚àá‚ÇÄ)
‚Ñí.mul!(n‚ÇÄ‚Çã, Qinv, ‚àá‚Çã)
A‚Çä = n‚ÇÄ‚Çä
A‚ÇÄ = n‚ÇÄ‚ÇÄ
A‚Çã = n‚ÇÄ‚Çã

dynIndex = T.nPresent_only+1:T.nVars

AÃÉ‚Çä  = A‚Çä[dynIndex,:]
AÃÉ‚Çã  = A‚Çã[dynIndex,:]
AÃÉ‚ÇÄ‚Çä = A‚ÇÄ[dynIndex, T.future_not_past_and_mixed_idx]
@views ‚Ñí.mul!(n‚Çú‚Çö, A‚ÇÄ[dynIndex, T.past_not_future_idx], ‚Ñí.I(T.nPast_not_future_and_mixed)[T.not_mixed_in_past_idx,:])
AÃÉ‚ÇÄ‚Çã = n‚Çú‚Çö

Z‚Çä = zeros(T.nMixed, T.nFuture_not_past_and_mixed)
I‚Çä = ‚Ñí.I(T.nFuture_not_past_and_mixed)[T.mixed_in_future_idx,:]

Z‚Çã = zeros(T.nMixed,T.nPast_not_future_and_mixed)
I‚Çã = ‚Ñí.diagm(ones(T.nPast_not_future_and_mixed))[T.mixed_in_past_idx,:]

D = vcat(hcat(AÃÉ‚ÇÄ‚Çã, AÃÉ‚Çä), hcat(I‚Çã, Z‚Çä))

‚Ñí.rmul!(AÃÉ‚Çã,-1)
‚Ñí.rmul!(AÃÉ‚ÇÄ‚Çä,-1)
E = vcat(hcat(AÃÉ‚Çã,AÃÉ‚ÇÄ‚Çä), hcat(Z‚Çã, I‚Çä))

# this is the companion form and by itself the linearisation of the matrix polynomial used in the linear time iteration method. see: https://opus4.kobv.de/opus4-matheon/files/209/240.pdf
schdcmp = ‚Ñí.schur!(D, E)



    eigenselect = abs.(schdcmp.Œ≤ ./ schdcmp.Œ±) .< 1

    ‚Ñí.ordschur!(schdcmp, eigenselect)

    Z‚ÇÇ‚ÇÅ = schdcmp.Z[T.nPast_not_future_and_mixed+1:end, 1:T.nPast_not_future_and_mixed]
    Z‚ÇÅ‚ÇÅ = @view schdcmp.Z[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]

    S‚ÇÅ‚ÇÅ    = @view schdcmp.S[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]
    T‚ÇÅ‚ÇÅ    = schdcmp.T[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]

    ZÃÇ‚ÇÅ‚ÇÅ = ‚Ñí.lu(Z‚ÇÅ‚ÇÅ, check = false)

SÃÇ‚ÇÅ‚ÇÅ = ‚Ñí.lu!(S‚ÇÅ‚ÇÅ, check = false)

# D      = Z‚ÇÇ‚ÇÅ / ZÃÇ‚ÇÅ‚ÇÅ
‚Ñí.rdiv!(Z‚ÇÇ‚ÇÅ, ZÃÇ‚ÇÅ‚ÇÅ)
D = Z‚ÇÇ‚ÇÅ

# L      = Z‚ÇÅ‚ÇÅ * (SÃÇ‚ÇÅ‚ÇÅ \ T‚ÇÅ‚ÇÅ) / ZÃÇ‚ÇÅ‚ÇÅ
‚Ñí.ldiv!(SÃÇ‚ÇÅ‚ÇÅ, T‚ÇÅ‚ÇÅ)
‚Ñí.mul!(n‚Çã‚Çã, Z‚ÇÅ‚ÇÅ, T‚ÇÅ‚ÇÅ)
‚Ñí.rdiv!(n‚Çã‚Çã, ZÃÇ‚ÇÅ‚ÇÅ)
L = n‚Çã‚Çã

sol = vcat(L[T.not_mixed_in_past_idx,:], D)



function calculate_first_order_solution(‚àá‚ÇÅ::Matrix{Float64}; 
                                        T::timings, 
                                        quadratic_matrix_equation_solver::Symbol = :doubling,
                                        verbose::Bool = false,
                                        timer::TimerOutput = TimerOutput())::Tuple{Matrix{Float64}, Bool}
    @timeit_debug timer "Calculate 1st order solution" begin
    @timeit_debug timer "Quadratic matrix solution" begin

    n‚ÇÄ‚Çä = zeros(T.nVars, T.nFuture_not_past_and_mixed)
    n‚ÇÄ‚ÇÄ = zeros(T.nVars, T.nVars)
    n‚ÇÄ‚Çã = zeros(T.nVars, T.nPast_not_future_and_mixed)
    n‚Çã‚Çã = zeros(T.nPast_not_future_and_mixed, T.nPast_not_future_and_mixed)
    n‚Çö‚Çã = zeros(T.nPresent_only, T.nPast_not_future_and_mixed)
    n‚Çú‚Çö = zeros(T.nVars - T.nPresent_only, T.nPast_not_future_and_mixed)

    ‚àá‚Çä = @view ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed]
    ‚àá‚ÇÄ = ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1, T.nVars)]
    ‚àá‚Çã = @view ‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed + T.nVars .+ range(1, T.nPast_not_future_and_mixed)]

    Q    = @views ‚Ñí.factorize(‚àá‚ÇÄ[:,T.present_only_idx])
    # Q    = ‚Ñí.qr!(‚àá‚ÇÄ[:,T.present_only_idx])
    Qinv = Q.Q'

    ‚Ñí.mul!(n‚ÇÄ‚Çä, Qinv, ‚àá‚Çä)
    ‚Ñí.mul!(n‚ÇÄ‚ÇÄ, Qinv, ‚àá‚ÇÄ)
    ‚Ñí.mul!(n‚ÇÄ‚Çã, Qinv, ‚àá‚Çã)
    A‚Çä = n‚ÇÄ‚Çä
    A‚ÇÄ = n‚ÇÄ‚ÇÄ
    A‚Çã = n‚ÇÄ‚Çã

    dynIndex = T.nPresent_only+1:T.nVars

    comb = union(T.future_not_past_and_mixed_idx, T.past_not_future_idx)
    sort!(comb)

    indices_future_not_past_and_mixed_in_comb = findall(x -> x in T.future_not_past_and_mixed_idx, comb)

    AÃÉ‚Çä  = A‚Çä[dynIndex,:] * ‚Ñí.I(length(comb))[indices_future_not_past_and_mixed_in_comb,:]

    AÃÉ‚ÇÄ = A‚ÇÄ[dynIndex, comb]

    indices_past_not_future_and_mixed_in_comb = findall(x -> x in T.past_not_future_and_mixed_idx, comb)

    AÃÉ‚Çã = A‚Çã[dynIndex,:] * ‚Ñí.I(length(comb))[indices_past_not_future_and_mixed_in_comb,:]

    A = AÃÉ‚Çä
    B = AÃÉ‚ÇÄ
    C = AÃÉ‚Çã

    sol = solve_quadratic_matrix_equation(A,B,C, Val(quadratic_matrix_equation_solver), T, verbose = verbose)

    AÃÑ‚ÇÄ·µ§  = @view A‚ÇÄ[1:T.nPresent_only, T.present_only_idx]
    A‚Çä·µ§  = @view A‚Çä[1:T.nPresent_only,:]
    AÃÉ‚ÇÄ·µ§  = A‚ÇÄ[1:T.nPresent_only, T.present_but_not_only_idx]
    A‚Çã·µ§  = A‚Çã[1:T.nPresent_only,:]

    AÃÑÃÇ‚ÇÄ·µ§ = ‚Ñí.lu!(AÃÑ‚ÇÄ·µ§, check = false)

    reverse_dynamic_order = indexin([T.past_not_future_idx; T.future_not_past_and_mixed_idx], T.present_but_not_only_idx)

    # A    = vcat(-(AÃÑÃÇ‚ÇÄ·µ§ \ (A‚Çä·µ§ * D * L + AÃÉ‚ÇÄ·µ§ * sol[T.dynamic_order,:] + A‚Çã·µ§)), sol)
    if T.nPresent_only > 0
        ‚Ñí.mul!(A‚Çã·µ§, AÃÉ‚ÇÄ·µ§, sol[:,indices_past_not_future_and_mixed_in_comb], 1, 1)
        ‚Ñí.mul!(n‚Çö‚Çã, A‚Çä·µ§, D)
        ‚Ñí.mul!(A‚Çã·µ§, n‚Çö‚Çã, L, 1, 1)
        ‚Ñí.ldiv!(AÃÑÃÇ‚ÇÄ·µ§, A‚Çã·µ§)
        ‚Ñí.rmul!(A‚Çã·µ§,-1)
    end
    A    = vcat(A‚Çã·µ§, sol[reverse_dynamic_order,indices_past_not_future_and_mixed_in_comb])

    end # timeit_debug
    @timeit_debug timer "Exogenous part solution" begin

    Jm = @view(‚Ñí.I(T.nVars)[T.past_not_future_and_mixed_idx,:])

    ‚àá‚Çä = @views ‚àá‚ÇÅ[:,1:T.nFuture_not_past_and_mixed] * ‚Ñí.I(T.nVars)[T.future_not_past_and_mixed_idx,:]
    ‚àá‚ÇÄ = copy(‚àá‚ÇÅ[:,T.nFuture_not_past_and_mixed .+ range(1,T.nVars)])
    ‚àá‚Çë = copy(‚àá‚ÇÅ[:,(T.nFuture_not_past_and_mixed + T.nVars + T.nPast_not_future_and_mixed + 1):end])
    
    M = similar(‚àá‚ÇÄ)
    ‚Ñí.mul!(M, A[T.reorder,:], Jm)
    ‚Ñí.mul!(‚àá‚ÇÄ, ‚àá‚Çä, M, 1, 1)
    C = ‚Ñí.lu!(‚àá‚ÇÄ, check = false)
    # C = RF.lu!(‚àá‚Çä * A * Jm + ‚àá‚ÇÄ, check = false)
    
    if !‚Ñí.issuccess(C)
        return hcat(A[T.reorder,:], zeros(length(T.reorder),T.nExo)), false
    end
    
    ‚Ñí.ldiv!(C, ‚àá‚Çë)
    ‚Ñí.rmul!(‚àá‚Çë, -1)
    # B = -(C \ ‚àá‚Çë) # otherwise Zygote doesnt diff it

    end # timeit_debug
    end # timeit_debug

    return hcat(A[T.reorder,:], ‚àá‚Çë), true
end

AAA,_ = calculate_first_order_solution(‚àá‚ÇÅ; T = T)
AAAA,_ = calculate_first_order_solution(‚àá‚ÇÅ; T = T)


calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :schur)[1]
calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :doubling)[1]
calculate_first_order_solution(‚àá‚ÇÅ; T = T)[1]

@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :schur)
@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :doubling)
@benchmark calculate_first_order_solution(‚àá‚ÇÅ; T = T)
AAsol,_ = riccati_forward(‚àá‚ÇÅ; T = T)

‚Ñí.norm(AAAA - AAA)


timer = TimerOutput()
calculate_first_order_solution(‚àá‚ÇÅ; T = T, quadratic_matrix_equation_solver = :schur, timer = timer)
timer



function solve_quadratic_matrix_equation(A::Matrix{S}, 
                                        B::Matrix{S}, 
                                        C::Matrix{S}, 
                                        ::Val{:schur}, 
                                        T::timings; 
                                        timer::TimerOutput = TimerOutput(),
                                        verbose::Bool = false) where S
    comb = union(T.future_not_past_and_mixed_idx, T.past_not_future_idx)
    sort!(comb)

    indices_future_not_past_and_mixed_in_comb = findall(x -> x in T.future_not_past_and_mixed_idx, comb)
    indices_past_not_future_and_mixed_in_comb = findall(x -> x in T.past_not_future_and_mixed_idx, comb)
    indices_past_not_future_in_comb = findall(x -> x in T.past_not_future_idx, comb)

    AÃÉ‚Çä = @view A[:,indices_future_not_past_and_mixed_in_comb]
    
    AÃÉ‚Çã = @view C[:,indices_past_not_future_and_mixed_in_comb]
    
    AÃÉ‚ÇÄ‚Çä = @view B[:,indices_future_not_past_and_mixed_in_comb]

    AÃÉ‚ÇÄ‚Çã = @views B[:,indices_past_not_future_in_comb] * ‚Ñí.I(T.nPast_not_future_and_mixed)[T.not_mixed_in_past_idx,:]

    Z‚Çä = zeros(T.nMixed, T.nFuture_not_past_and_mixed)
    I‚Çä = ‚Ñí.I(T.nFuture_not_past_and_mixed)[T.mixed_in_future_idx,:]
    
    Z‚Çã = zeros(T.nMixed,T.nPast_not_future_and_mixed)
    I‚Çã = ‚Ñí.I(T.nPast_not_future_and_mixed)[T.mixed_in_past_idx,:]
    
    D = vcat(hcat(AÃÉ‚ÇÄ‚Çã, AÃÉ‚Çä), hcat(I‚Çã, Z‚Çä))
    
    ‚Ñí.rmul!(AÃÉ‚Çã,-1)
    ‚Ñí.rmul!(AÃÉ‚ÇÄ‚Çä,-1)
    E = vcat(hcat(AÃÉ‚Çã,AÃÉ‚ÇÄ‚Çä), hcat(Z‚Çã, I‚Çä))
    
    # this is the companion form and by itself the linearisation of the matrix polynomial used in the linear time iteration method. see: https://opus4.kobv.de/opus4-matheon/files/209/240.pdf
    schdcmp = ‚Ñí.schur!(D, E)
    
    eigenselect = abs.(schdcmp.Œ≤ ./ schdcmp.Œ±) .< 1

    ‚Ñí.ordschur!(schdcmp, eigenselect)

    Z‚ÇÇ‚ÇÅ = schdcmp.Z[T.nPast_not_future_and_mixed+1:end, 1:T.nPast_not_future_and_mixed]
    Z‚ÇÅ‚ÇÅ = @view schdcmp.Z[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]

    S‚ÇÅ‚ÇÅ    = @view schdcmp.S[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]
    T‚ÇÅ‚ÇÅ    = schdcmp.T[1:T.nPast_not_future_and_mixed, 1:T.nPast_not_future_and_mixed]

    ZÃÇ‚ÇÅ‚ÇÅ = ‚Ñí.lu(Z‚ÇÅ‚ÇÅ, check = false)
    
    SÃÇ‚ÇÅ‚ÇÅ = ‚Ñí.lu!(S‚ÇÅ‚ÇÅ, check = false)
    
    # D      = Z‚ÇÇ‚ÇÅ / ZÃÇ‚ÇÅ‚ÇÅ
    ‚Ñí.rdiv!(Z‚ÇÇ‚ÇÅ, ZÃÇ‚ÇÅ‚ÇÅ)
    D = Z‚ÇÇ‚ÇÅ
    
    # L      = Z‚ÇÅ‚ÇÅ * (SÃÇ‚ÇÅ‚ÇÅ \ T‚ÇÅ‚ÇÅ) / ZÃÇ‚ÇÅ‚ÇÅ
    ‚Ñí.ldiv!(SÃÇ‚ÇÅ‚ÇÅ, T‚ÇÅ‚ÇÅ)
    ‚Ñí.mul!(n‚Çã‚Çã, Z‚ÇÅ‚ÇÅ, T‚ÇÅ‚ÇÅ)
    ‚Ñí.rdiv!(n‚Çã‚Çã, ZÃÇ‚ÇÅ‚ÇÅ)
    L = n‚Çã‚Çã
    
    sol = vcat(L[T.not_mixed_in_past_idx,:], D)

    return sol[T.dynamic_order,:] * ‚Ñí.I(length(comb))[indices_past_not_future_and_mixed_in_comb,:]
end


function solve_quadratic_matrix_equation(A::Matrix{S}, 
                                        B::Matrix{S}, 
                                        C::Matrix{S}, 
                                        ::Val{:doubling}, 
                                        T::timings;
                                        tol::AbstractFloat = eps(),
                                        timer::TimerOutput = TimerOutput(),
                                        verbose::Bool = false,
                                        max_iter::Int = 100) where S
    @timeit_debug timer "Prepare" begin
    BÃÇ = ‚Ñí.factorize(B)

    # Compute initial values X, Y, E, F
    E = BÃÇ \ C
    F = BÃÇ \ A
    X = -E
    Y = -F

    X_new = similar(X)
    Y_new = similar(Y)
    E_new = similar(E) 
    F_new = similar(F)
    
    temp1 = similar(Y)  # Temporary for intermediate operations

    n = size(X, 1)
    II = ‚Ñí.I(n)  # Temporary for identity matrix

    Xtol = 1.0
    Ytol = 1.0

    end # timeit_debug
    @timeit_debug timer "Loop" begin

    for i in 1:max_iter
        @timeit_debug timer "Compute EI" begin

        # Compute EI = I - Y * X
        ‚Ñí.mul!(temp1, Y, X)
        ‚Ñí.axpby!(1, II, -1, temp1)

        end # timeit_debug
        @timeit_debug timer "Invert EI" begin

        fEI = ‚Ñí.lu(temp1, check = false)

        end # timeit_debug
        @timeit_debug timer "Compute E" begin

        # Compute E = E * EI * E
        ‚Ñí.ldiv!(temp1, fEI, E)
        ‚Ñí.mul!(E_new, E, temp1)

        end # timeit_debug
        @timeit_debug timer "Compute FI" begin
            
        # Compute FI = I - X * Y
        copy!(temp1, II)
        ‚Ñí.mul!(temp1, X, Y, -1, 1)

        end # timeit_debug
        @timeit_debug timer "Invert FI" begin

        fFI = ‚Ñí.lu(temp1, check = false)
        
        end # timeit_debug
        @timeit_debug timer "Compute F" begin
        
        # Compute F = F * FI * F
        ‚Ñí.ldiv!(temp1, fFI, F)
        ‚Ñí.mul!(F_new, F, temp1)

        end # timeit_debug
        @timeit_debug timer "Compute X_new" begin
    
        # Compute X_new = X + F * FI * X * E
        ‚Ñí.mul!(X_new, X, E)
        ‚Ñí.ldiv!(temp1, fFI, X_new)
        ‚Ñí.mul!(X_new, F, temp1)
        if i > 5 Xtol = ‚Ñí.norm(X_new) end
        ‚Ñí.axpy!(1, X, X_new)

        end # timeit_debug
        @timeit_debug timer "Compute Y_new" begin

        # Compute Y_new = Y + E * EI * Y * F
        ‚Ñí.mul!(Y_new, Y, F)
        ‚Ñí.ldiv!(temp1, fEI, Y_new)
        ‚Ñí.mul!(Y_new, E, temp1)
        if i > 5 Ytol = ‚Ñí.norm(Y_new) end
        ‚Ñí.axpy!(1, Y, Y_new)
        
        # println("Iter: $i; xtol: $(‚Ñí.norm(X_new - X)); ytol: $(‚Ñí.norm(Y_new - Y))")

        # Check for convergence
        if Xtol < tol && Ytol < tol
            if verbose println("Converged in $i iterations.") end
            break
        end

        end # timeit_debug
        @timeit_debug timer "Copy" begin

        # Update values for the next iteration
        copy!(X, X_new)
        copy!(Y, Y_new)
        copy!(E, E_new)
        copy!(F, F_new)
        end # timeit_debug
    end
    end # timeit_debug

    return X_new  # Converged to solution 
end


res1 = solve_quadratic_matrix_equation(A,B,C, Val(:schur), T)

res2 = solve_quadratic_matrix_equation(A,B,C, Val(:doubling), T)

‚Ñí.norm(A*res1^2 + B*res1 + C) / ‚Ñí.norm(C)
‚Ñí.norm(A*res2^2 + B*res2 + C) / ‚Ñí.norm(C)

‚Ñí.norm(A*res1^2 + B*res1 + C)
‚Ñí.norm(A*res2^2 + B*res2 + C)


@benchmark solve_quadratic_matrix_equation(A,B,C, Val(:schur), T)

@benchmark solve_quadratic_matrix_equation(A,B,C, Val(:doubling), T)

res1 ‚âà res2

timer = TimerOutput()
for i in 1:100 solve_quadratic_matrix_equation(A,B,C, Val(:doubling), T, timer = timer) end
timer

sol  =res2