@stable default_mode = "disable" begin

# Specialization for :kalman filter
function calculate_loglikelihood(::Val{:kalman}, 
                                algorithm, 
                                observables, 
                                ùêí, 
                                data_in_deviations, 
                                TT, 
                                presample_periods, 
                                initial_covariance, 
                                state, 
                                warmup_iterations, 
                                filter_algorithm, 
                                opts) #; 
                                # timer::TimerOutput = TimerOutput())
    return calculate_kalman_filter_loglikelihood(observables, 
                                                ùêí, 
                                                data_in_deviations, 
                                                TT, 
                                                presample_periods = presample_periods, 
                                                initial_covariance = initial_covariance, 
                                                # timer = timer, 
                                                opts = opts)
end

function calculate_kalman_filter_loglikelihood(observables::Vector{Symbol}, 
                                                ùêí::Union{Matrix{S},Vector{AbstractMatrix{S}}}, 
                                                data_in_deviations::Matrix{S},
                                                T::timings; 
                                                # timer::TimerOutput = TimerOutput(), 
                                                presample_periods::Int = 0, 
                                                initial_covariance::Symbol = :theoretical,
                                                opts::CalculationOptions = merge_calculation_options())::S where S <: Real
    obs_idx = @ignore_derivatives convert(Vector{Int},indexin(observables,sort(union(T.aux,T.var,T.exo_present))))

    calculate_kalman_filter_loglikelihood(obs_idx, ùêí, data_in_deviations, T, presample_periods = presample_periods, initial_covariance = initial_covariance, opts = opts)
    # timer = timer, 
end

function calculate_kalman_filter_loglikelihood(observables::Vector{String}, 
                                                ùêí::Union{Matrix{S},Vector{AbstractMatrix{S}}}, 
                                                data_in_deviations::Matrix{S},
                                                T::timings; 
                                                # timer::TimerOutput = TimerOutput(), 
                                                presample_periods::Int = 0, 
                                                initial_covariance::Symbol = :theoretical,
                                                opts::CalculationOptions = merge_calculation_options())::S where S <: Real
    obs_idx = @ignore_derivatives convert(Vector{Int},indexin(observables,sort(union(T.aux,T.var,T.exo_present))))

    calculate_kalman_filter_loglikelihood(obs_idx, ùêí, data_in_deviations, T, presample_periods = presample_periods, initial_covariance = initial_covariance, opts = opts)
    # timer = timer, 
end

function calculate_kalman_filter_loglikelihood(observables_index::Vector{Int}, 
                                                ùêí::Union{Matrix{S},Vector{AbstractMatrix{S}}}, 
                                                data_in_deviations::Matrix{S},
                                                T::timings; 
                                                # timer::TimerOutput = TimerOutput(), 
                                                presample_periods::Int = 0,
                                                initial_covariance::Symbol = :theoretical,
                                                lyapunov_algorithm::Symbol = :doubling,
                                                opts::CalculationOptions = merge_calculation_options())::S where S <: Real
    observables_and_states = @ignore_derivatives sort(union(T.past_not_future_and_mixed_idx,observables_index))

    A = ùêí[observables_and_states,1:T.nPast_not_future_and_mixed] * ‚Ñí.diagm(ones(S, length(observables_and_states)))[@ignore_derivatives(indexin(T.past_not_future_and_mixed_idx,observables_and_states)),:]
    B = ùêí[observables_and_states,T.nPast_not_future_and_mixed+1:end]

    C = ‚Ñí.diagm(ones(length(observables_and_states)))[@ignore_derivatives(indexin(sort(observables_index), observables_and_states)),:]

    ùêÅ = B * B'

    # Gaussian Prior
    P = get_initial_covariance(Val(initial_covariance), A, ùêÅ, opts = opts)
    # timer = timer, 

    return run_kalman_iterations(A, ùêÅ, C, P, data_in_deviations, presample_periods = presample_periods, verbose = opts.verbose)
    # timer = timer, 
end

# TODO: use higher level wrapper, like for lyapunov/sylvester
# Specialization for :theoretical
function get_initial_covariance(::Val{:theoretical}, 
                                A::AbstractMatrix{S}, 
                                B::AbstractMatrix{S}; 
                                opts::CalculationOptions = merge_calculation_options())::Matrix{S} where S <: Real
                                # timer::TimerOutput = TimerOutput(), 
    P, _ = solve_lyapunov_equation(A, B, 
                                    lyapunov_algorithm = opts.lyapunov_algorithm, 
                                    tol = opts.tol.lyapunov_tol,
                                    acceptance_tol = opts.tol.lyapunov_acceptance_tol,
                                    verbose = opts.verbose) # timer = timer, 

    return P
end


# Specialization for :diagonal
function get_initial_covariance(::Val{:diagonal}, 
                                A::AbstractMatrix{S}, 
                                B::AbstractMatrix{S}; 
                                opts::CalculationOptions = merge_calculation_options())::Matrix{S} where S <: Real
                                # timer::TimerOutput = TimerOutput(), 
    P = @ignore_derivatives collect(‚Ñí.I(size(A, 1)) * 10.0)
    return P
end


function run_kalman_iterations(A::Matrix{S}, 
                                ùêÅ::Matrix{S},
                                C::Matrix{Float64}, 
                                P::Matrix{S}, 
                                data_in_deviations::Matrix{S}; 
                                presample_periods::Int = 0,
                                # timer::TimerOutput = TimerOutput(),
                                verbose::Bool = false)::S where S <: Float64
    # @timeit_debug timer "Calculate Kalman filter" begin

    u = zeros(S, size(C,2))

    z = C * u

    ztmp = similar(z)

    loglik = S(0.0)

    utmp = similar(u)

    Ctmp = similar(C)

    F = similar(C * C')

    K = similar(C')
    # Ktmp = similar(C')

    tmp = similar(P)
    Ptmp = similar(P)

    # @timeit_debug timer "Loop" begin
    for t in 1:size(data_in_deviations, 2)
        if !all(isfinite.(z)) 
            if verbose println("KF not finite at step $t") end
            return -Inf 
        end

        ‚Ñí.axpby!(1, data_in_deviations[:, t], -1, z)
        # v = data_in_deviations[:, t] - z

        ‚Ñí.mul!(Ctmp, C, P) # use Octavian.jl
        ‚Ñí.mul!(F, Ctmp, C')
        # F = C * P * C'

        # @timeit_debug timer "LU factorisation" begin
        luF = RF.lu!(F, check = false) ### has to be LU since F will always be symmetric and positive semi-definite but not positive definite (due to linear dependencies)
        # end # timeit_debug

        if !‚Ñí.issuccess(luF)
            if verbose println("KF factorisation failed step $t") end
            return -Inf
        end

        Fdet = ‚Ñí.det(luF)

        # Early return if determinant is too small, indicating numerical instability.
        if Fdet < eps(Float64)
            if verbose println("KF factorisation failed step $t") end
            return -Inf
        end

        # invF = inv(luF) ###

        # @timeit_debug timer "LU div" begin
        if t > presample_periods
            ‚Ñí.ldiv!(ztmp, luF, z)
            loglik += log(Fdet) + ‚Ñí.dot(z', ztmp) ###
            # loglik += log(Fdet) + z' * invF * z###
            # loglik += log(Fdet) + v' * invF * v###
        end

        # ‚Ñí.mul!(Ktmp, P, C')
        # ‚Ñí.mul!(K, Ktmp, invF)
        ‚Ñí.mul!(K, P, C')
        ‚Ñí.rdiv!(K, luF)
        # K = P * Ct / luF
        # K = P * C' * invF

        # end # timeit_debug
        # @timeit_debug timer "Matmul" begin

        ‚Ñí.mul!(tmp, K, C)
        ‚Ñí.mul!(Ptmp, tmp, P)
        ‚Ñí.axpy!(-1, Ptmp, P)

        ‚Ñí.mul!(Ptmp, A, P)
        ‚Ñí.mul!(P, Ptmp, A')
        ‚Ñí.axpy!(1, ùêÅ, P)
        # P = A * (P - K * C * P) * A' + ùêÅ

        ‚Ñí.mul!(u, K, z, 1, 1)
        ‚Ñí.mul!(utmp, A, u)
        u .= utmp
        # u = A * (u + K * v)

        ‚Ñí.mul!(z, C, u)
        # z = C * u

        # end # timeit_debug
    end

    # end # timeit_debug
    # end # timeit_debug

    return -(loglik + ((size(data_in_deviations, 2) - presample_periods) * size(data_in_deviations, 1)) * log(2 * 3.141592653589793)) / 2 
end



function run_kalman_iterations(A::Matrix{S}, 
                                ùêÅ::Matrix{S}, 
                                C::Matrix{Float64}, 
                                P::Matrix{S}, 
                                data_in_deviations::Matrix{S}; 
                                presample_periods::Int = 0,
                                # timer::TimerOutput = TimerOutput(),
                                verbose::Bool = false)::S where S <: ‚Ñ±.Dual
    # @timeit_debug timer "Calculate Kalman filter - forward mode AD" begin
    u = zeros(S, size(C,2))

    z = C * u

    loglik = S(0.0)

    F = similar(C * C')

    K = similar(C')

    for t in 1:size(data_in_deviations, 2)
        if !all(isfinite.(z)) 
            if verbose println("KF not finite at step $t") end
            return -Inf 
        end

        v = data_in_deviations[:, t] - z

        F = C * P * C'

        luF = ‚Ñí.lu(F, check = false) ###

        if !‚Ñí.issuccess(luF)
            if verbose println("KF factorisation failed step $t") end
            return -Inf
        end

        Fdet = ‚Ñí.det(luF)

        # Early return if determinant is too small, indicating numerical instability.
        if Fdet < eps(Float64)
            if verbose println("KF factorisation failed step $t") end
            return -Inf
        end

        invF = inv(luF) ###

        if t > presample_periods
            loglik += log(Fdet) + ‚Ñí.dot(v, invF, v)###
        end

        K = P * C' * invF

        P = A * (P - K * C * P) * A' + ùêÅ

        u = A * (u + K * v)

        z = C * u
    end

    # end # timeit_debug

    return -(loglik + ((size(data_in_deviations, 2) - presample_periods) * size(data_in_deviations, 1)) * log(2 * 3.141592653589793)) / 2 
end

end # dispatch_doctor

function rrule(::typeof(run_kalman_iterations), 
                    A, 
                    ùêÅ, 
                    C, 
                    P, 
                    data_in_deviations; 
                    presample_periods = 0,
                    # timer::TimerOutput = TimerOutput(),
                    verbose::Bool = false)
    # @timeit_debug timer "Calculate Kalman filter - forward" begin
    T = size(data_in_deviations, 2) + 1

    z = zeros(size(data_in_deviations, 1))

    uÃÑ = zeros(size(C,2))

    PÃÑ = deepcopy(P) 

    temp_N_N = similar(P)

    PCtmp = similar(C')

    F = similar(C * C')

    u = [similar(uÃÑ) for _ in 1:T] # used in backward pass

    P = [copy(PÃÑ) for _ in 1:T] # used in backward pass

    CP = [zero(C) for _ in 1:T] # used in backward pass

    K = [similar(C') for _ in 1:T] # used in backward pass

    invF = [similar(F) for _ in 1:T] # used in backward pass

    v = [zeros(size(data_in_deviations, 1)) for _ in 1:T] # used in backward pass

    loglik = 0.0

    # @timeit_debug timer "Loop" begin
        
    for t in 2:T
        if !all(isfinite.(z)) 
            if verbose println("KF not finite at step $t") end
            return -Inf, x -> NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent() 
        end

        v[t] .= data_in_deviations[:, t-1] .- z#[t-1]

        # CP[t] .= C * PÃÑ[t-1]
        ‚Ñí.mul!(CP[t], C, PÃÑ)#[t-1])
    
        # F[t] .= CP[t] * C'
        ‚Ñí.mul!(F, CP[t], C')
    
        luF = RF.lu(F, check = false)
    
        if !‚Ñí.issuccess(luF)
            if verbose println("KF factorisation failed step $t") end
            return -Inf, x -> NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent()
        end

        Fdet = ‚Ñí.det(luF)

        # Early return if determinant is too small, indicating numerical instability.
        if Fdet < eps(Float64)
            if verbose println("KF factorisation failed step $t") end
            return -Inf, x -> NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent(), NoTangent()
        end
        
        # invF[t] .= inv(luF)
        copy!(invF[t], inv(luF))
        
        if t - 1 > presample_periods
            loglik += log(Fdet) + ‚Ñí.dot(v[t], invF[t], v[t])
        end

        # K[t] .= PÃÑ[t-1] * C' * invF[t]
        ‚Ñí.mul!(PCtmp, PÃÑ, C')
        ‚Ñí.mul!(K[t], PCtmp, invF[t])

        # P[t] .= PÃÑ[t-1] - K[t] * CP[t]
        ‚Ñí.mul!(P[t], K[t], CP[t], -1, 0)
        P[t] .+= PÃÑ
    
        # PÃÑ[t] .= A * P[t] * A' + ùêÅ
        ‚Ñí.mul!(temp_N_N, P[t], A')
        ‚Ñí.mul!(PÃÑ, A, temp_N_N)
        PÃÑ .+= ùêÅ

        # u[t] .= K[t] * v[t] + uÃÑ[t-1]
        ‚Ñí.mul!(u[t], K[t], v[t])
        u[t] .+= uÃÑ
        
        # uÃÑ[t] .= A * u[t]
        ‚Ñí.mul!(uÃÑ, A, u[t])

        # z[t] .= C * uÃÑ[t]
        ‚Ñí.mul!(z, C, uÃÑ)
    end

    llh = -(loglik + ((size(data_in_deviations, 2) - presample_periods) * size(data_in_deviations, 1)) * log(2 * 3.141592653589793)) / 2 

    # initialise derivative variables
    ‚àÇA = zero(A)
    ‚àÇF = zero(F)
    ‚àÇFaccum = zero(F)
    ‚àÇP = zero(PÃÑ)
    ‚àÇuÃÑ = zero(uÃÑ)
    ‚àÇv = zero(v[1])
    ‚àÇùêÅ = zero(ùêÅ)
    ‚àÇdata_in_deviations = zero(data_in_deviations)
    vtmp = zero(v[1])
    Ptmp = zero(P[1])

    # end # timeit_debug
    # end # timeit_debug

    # pullback
    function kalman_pullback(‚àÇllh)
        # @timeit_debug timer "Calculate Kalman filter - reverse" begin
        ‚Ñí.rmul!(‚àÇA, 0)
        ‚Ñí.rmul!(‚àÇFaccum, 0)
        ‚Ñí.rmul!(‚àÇP, 0)
        ‚Ñí.rmul!(‚àÇuÃÑ, 0)
        ‚Ñí.rmul!(‚àÇùêÅ, 0)

        # @timeit_debug timer "Loop" begin
        for t in T:-1:2
            if t > presample_periods + 1
                # ‚àÇllh‚àÇF
                # loglik += logdet(F[t]) + v[t]' * invF[t] * v[t]
                # ‚àÇF = invF[t]' - invF[t]' * v[t] * v[t]' * invF[t]'
                ‚Ñí.mul!(‚àÇF, v[t], v[t]')
                ‚Ñí.mul!(invF[1], invF[t]', ‚àÇF) # using invF[1] as temporary storage
                ‚Ñí.mul!(‚àÇF, invF[1], invF[t]')
                ‚Ñí.axpby!(1, invF[t]', -1, ‚àÇF)
        
                # ‚àÇllh‚àÇuÃÑ
                # loglik += logdet(F[t]) + v[t]' * invF[t] * v[t]
                # z[t] .= C * uÃÑ[t]
                # ‚àÇv = (invF[t]' + invF[t]) * v[t]
                copy!(invF[1], invF[t]' .+ invF[t])
                # copy!(invF[1], invF[t]) # using invF[1] as temporary storage
                # ‚Ñí.axpy!(1, invF[t]', invF[1]) # using invF[1] as temporary storage
                ‚Ñí.mul!(‚àÇv, invF[1], v[t])
                # ‚Ñí.mul!(‚àÇuÃÑ‚àÇv, C', v[1])
            else
                ‚Ñí.rmul!(‚àÇF, 0)
                ‚Ñí.rmul!(‚àÇv, 0)
            end
        
            # ‚àÇF‚àÇP
            # F[t] .= C * PÃÑ[t-1] * C'
            # ‚àÇP += C' * (‚àÇF + ‚àÇFaccum) * C
            ‚Ñí.axpy!(1, ‚àÇFaccum, ‚àÇF)
            ‚Ñí.mul!(PCtmp, C', ‚àÇF) 
            ‚Ñí.mul!(‚àÇP, PCtmp, C, 1, 1) 
        
            # ‚àÇuÃÑ‚àÇP
            # K[t] .= PÃÑ[t-1] * C' * invF[t]
            # u[t] .= K[t] * v[t] + uÃÑ[t-1]
            # uÃÑ[t] .= A * u[t]
            # ‚àÇP += A' * ‚àÇuÃÑ * v[t]' * invF[t]' * C
            ‚Ñí.mul!(CP[1], invF[t]', C) # using CP[1] as temporary storage
            ‚Ñí.mul!(PCtmp, ‚àÇuÃÑ , v[t]')
            ‚Ñí.mul!(P[1], PCtmp , CP[1]) # using P[1] as temporary storage
            ‚Ñí.mul!(‚àÇP, A', P[1], 1, 1) 
        
            # ‚àÇuÃÑ‚àÇdata
            # v[t] .= data_in_deviations[:, t-1] .- z
            # z[t] .= C * uÃÑ[t]
            # ‚àÇdata_in_deviations[:,t-1] = -C * ‚àÇuÃÑ
            ‚Ñí.mul!(u[1], A', ‚àÇuÃÑ)
            ‚Ñí.mul!(v[1], K[t]', u[1]) # using v[1] as temporary storage
            ‚Ñí.axpy!(1, ‚àÇv, v[1])
            ‚àÇdata_in_deviations[:,t-1] .= v[1]
            # ‚Ñí.mul!(‚àÇdata_in_deviations[:,t-1], C, ‚àÇuÃÑ, -1, 0) # cannot assign to columns in matrix, must be whole matrix 

            # ‚àÇuÃÑ‚àÇuÃÑ
            # z[t] .= C * uÃÑ[t]
            # v[t] .= data_in_deviations[:, t-1] .- z
            # K[t] .= PÃÑ[t-1] * C' * invF[t]
            # u[t] .= K[t] * v[t] + uÃÑ[t-1]
            # uÃÑ[t] .= A * u[t]
            # step to next iteration
            # ‚àÇuÃÑ = A' * ‚àÇuÃÑ - C' * K[t]' * A' * ‚àÇuÃÑ
            ‚Ñí.mul!(u[1], A', ‚àÇuÃÑ) # using u[1] as temporary storage
            ‚Ñí.mul!(v[1], K[t]', u[1]) # using v[1] as temporary storage
            ‚Ñí.mul!(‚àÇuÃÑ, C', v[1])
            ‚Ñí.mul!(u[1], C', v[1], -1, 1)
            copy!(‚àÇuÃÑ, u[1])
        
            # ‚àÇllh‚àÇuÃÑ
            # loglik += logdet(F[t]) + v[t]' * invF[t] * v[t]
            # v[t] .= data_in_deviations[:, t-1] .- z
            # z[t] .= C * uÃÑ[t]
            # ‚àÇuÃÑ -= ‚àÇuÃÑ‚àÇv
            ‚Ñí.mul!(u[1], C', ‚àÇv) # using u[1] as temporary storage
            ‚Ñí.axpy!(-1, u[1], ‚àÇuÃÑ)
        
            if t > 2
                # ‚àÇuÃÑ‚àÇA
                # uÃÑ[t] .= A * u[t]
                # ‚àÇA += ‚àÇuÃÑ * u[t-1]'
                ‚Ñí.mul!(‚àÇA, ‚àÇuÃÑ, u[t-1]', 1, 1)
        
                # ‚àÇPÃÑ‚àÇA and ‚àÇPÃÑ‚àÇùêÅ
                # PÃÑ[t] .= A * P[t] * A' + ùêÅ
                # ‚àÇA += ‚àÇP * A * P[t-1]' + ‚àÇP' * A * P[t-1]
                ‚Ñí.mul!(P[1], A, P[t-1]')
                ‚Ñí.mul!(Ptmp ,‚àÇP, P[1])
                ‚Ñí.mul!(P[1], A, P[t-1])
                ‚Ñí.mul!(Ptmp ,‚àÇP', P[1], 1, 1)
                ‚Ñí.axpy!(1, Ptmp, ‚àÇA)
        
                # ‚àÇùêÅ += ‚àÇP
                ‚Ñí.axpy!(1, ‚àÇP, ‚àÇùêÅ)
        
                # ‚àÇP‚àÇP
                # P[t] .= PÃÑ[t-1] - K[t] * C * PÃÑ[t-1]
                # PÃÑ[t] .= A * P[t] * A' + ùêÅ
                # step to next iteration
                # ‚àÇP = A' * ‚àÇP * A
                ‚Ñí.mul!(P[1], ‚àÇP, A) # using P[1] as temporary storage
                ‚Ñí.mul!(‚àÇP, A', P[1])
        
                # ‚àÇPÃÑ‚àÇP
                # K[t] .= PÃÑ[t-1] * C' * invF[t]
                # P[t] .= PÃÑ[t-1] - K[t] * CP[t]
                # ‚àÇP -= C' * K[t-1]' * ‚àÇP + ‚àÇP * K[t-1] * C 
                ‚Ñí.mul!(PCtmp, ‚àÇP, K[t-1])
                ‚Ñí.mul!(CP[1], K[t-1]', ‚àÇP) # using CP[1] as temporary storage
                ‚Ñí.mul!(‚àÇP, PCtmp, C, -1, 1)
                ‚Ñí.mul!(‚àÇP, C', CP[1], -1, 1)
        
                # ‚àÇuÃÑ‚àÇF
                # K[t] .= PÃÑ[t-1] * C' * invF[t]
                # u[t] .= K[t] * v[t] + uÃÑ[t-1]
                # uÃÑ[t] .= A * u[t]
                # ‚àÇFaccum = -invF[t-1]' * CP[t-1] * A' * ‚àÇuÃÑ * v[t-1]' * invF[t-1]'
                ‚Ñí.mul!(u[1], A', ‚àÇuÃÑ) # using u[1] as temporary storage
                ‚Ñí.mul!(v[1], CP[t-1], u[1]) # using v[1] as temporary storage
                ‚Ñí.mul!(vtmp, invF[t-1]', v[1], -1, 0)
                ‚Ñí.mul!(invF[1], vtmp, v[t-1]') # using invF[1] as temporary storage
                ‚Ñí.mul!(‚àÇFaccum, invF[1], invF[t-1]')
        
                # ‚àÇP‚àÇF
                # K[t] .= PÃÑ[t-1] * C' * invF[t]
                # P[t] .= PÃÑ[t-1] - K[t] * CP[t]
                # ‚àÇFaccum -= invF[t-1]' * CP[t-1] * ‚àÇP * CP[t-1]' * invF[t-1]'
                ‚Ñí.mul!(CP[1], invF[t-1]', CP[t-1]) # using CP[1] as temporary storage
                ‚Ñí.mul!(PCtmp, CP[t-1]', invF[t-1]')
                ‚Ñí.mul!(K[1], ‚àÇP, PCtmp) # using K[1] as temporary storage
                ‚Ñí.mul!(‚àÇFaccum, CP[1], K[1], -1, 1)
        
            end
        end
        
        ‚Ñí.rmul!(‚àÇP, -‚àÇllh/2)
        ‚Ñí.rmul!(‚àÇA, -‚àÇllh/2)
        ‚Ñí.rmul!(‚àÇùêÅ, -‚àÇllh/2)
        ‚Ñí.rmul!(‚àÇdata_in_deviations, -‚àÇllh/2)

        # end # timeit_debug
        # end # timeit_debug

        return NoTangent(), ‚àÇA, ‚àÇùêÅ, NoTangent(), ‚àÇP, ‚àÇdata_in_deviations, NoTangent()
    end
    
    return llh, kalman_pullback
end

@stable default_mode = "disable" begin

function filter_data_with_model(ùìÇ::‚Ñ≥,
    data_in_deviations::KeyedArray{Float64},
    ::Val{:first_order}, # algo
    ::Val{:kalman}; # filter,
    warmup_iterations::Int = 0,
    opts::CalculationOptions = merge_calculation_options(),
    smooth::Bool = true)

    obs_axis = collect(axiskeys(data_in_deviations,1))

    obs_symbols = obs_axis isa String_input ? obs_axis .|> Meta.parse .|> replace_indices : obs_axis

    filtered_and_smoothed = filter_and_smooth(ùìÇ, data_in_deviations, obs_symbols; opts = opts)

    variables           = filtered_and_smoothed[smooth ? 1 : 5]
    standard_deviations = filtered_and_smoothed[smooth ? 2 : 6]
    shocks              = filtered_and_smoothed[smooth ? 3 : 7]
    decomposition       = filtered_and_smoothed[smooth ? 4 : 8]

    return variables, shocks, standard_deviations, decomposition
end



function filter_and_smooth(ùìÇ::‚Ñ≥, 
                            data_in_deviations::AbstractArray{Float64}, 
                            observables::Vector{Symbol};
                            opts::CalculationOptions = merge_calculation_options())
    # Based on Durbin and Koopman (2012)
    # https://jrnold.github.io/ssmodels-in-stan/filtering-and-smoothing.html#smoothing

    @assert length(observables) == size(data_in_deviations)[1] "Data columns and number of observables are not identical. Make sure the data contains only the selected observables."
    @assert length(observables) <= ùìÇ.timings.nExo "Cannot estimate model with more observables than exogenous shocks. Have at least as many shocks as observable variables."

    sort!(observables)

    solve!(ùìÇ, opts = opts)

    parameters = ùìÇ.parameter_values

    SS_and_pars, (solution_error, iters) = get_NSSS_and_parameters(ùìÇ, parameters, opts = opts)
    
    @assert solution_error < opts.tol.NSSS_acceptance_tol "Could not solve non stochastic steady state." 

	‚àá‚ÇÅ = calculate_jacobian(parameters, SS_and_pars, ùìÇ)# |> Matrix

    sol, qme_sol, solved = calculate_first_order_solution(‚àá‚ÇÅ; T = ùìÇ.timings, opts = opts)

    if solved ùìÇ.solution.perturbation.qme_solution = qme_sol end

    A = @views sol[:,1:ùìÇ.timings.nPast_not_future_and_mixed] * ‚Ñí.diagm(ones(ùìÇ.timings.nVars))[ùìÇ.timings.past_not_future_and_mixed_idx,:]

    B = @views sol[:,ùìÇ.timings.nPast_not_future_and_mixed+1:end]

    C = @views ‚Ñí.diagm(ones(ùìÇ.timings.nVars))[sort(indexin(observables,sort(union(ùìÇ.aux,ùìÇ.var,ùìÇ.exo_present)))),:]

    ùêÅ = B * B'

    PÃÑ = calculate_covariance(ùìÇ.parameter_values, ùìÇ, opts = opts)[1]

    n_obs = size(data_in_deviations,2)

    v = zeros(size(C,1), n_obs)
    Œº = zeros(size(A,1), n_obs+1) # filtered_states
    P = zeros(size(A,1), size(A,1), n_obs+1) # filtered_covariances
    œÉ = zeros(size(A,1), n_obs) # filtered_standard_deviations
    iF= zeros(size(C,1), size(C,1), n_obs)
    L = zeros(size(A,1), size(A,1), n_obs)
    œµ = zeros(size(B,2), n_obs) # filtered_shocks

    P[:, :, 1] = PÃÑ

    # Kalman Filter
    for t in axes(data_in_deviations,2)
        v[:, t]     .= data_in_deviations[:, t] - C * Œº[:, t]

        FÃÑ = ‚Ñí.lu(C * P[:, :, t] * C', check = false)

        if !‚Ñí.issuccess(FÃÑ) 
            @warn "Kalman filter stopped in period $t due to numerical stabiltiy issues."
            break
        end

        iF[:, :, t] .= inv(FÃÑ)
        PCiF         = P[:, :, t] * C' * iF[:, :, t]
        L[:, :, t]  .= A - A * PCiF * C
        P[:, :, t+1].= A * P[:, :, t] * L[:, :, t]' + ùêÅ
        œÉ[:, t]     .= sqrt.(abs.(‚Ñí.diag(P[:, :, t+1]))) # small numerical errors in this computation
        Œº[:, t+1]   .= A * (Œº[:, t] + PCiF * v[:, t])
        œµ[:, t]     .= B' * C' * iF[:, :, t] * v[:, t]
    end


    # Historical shock decompositionm (filter)
    filter_decomposition = zeros(size(A,1), size(B,2)+2, n_obs)

    filter_decomposition[:,end,:] .= Œº[:, 2:end]
    filter_decomposition[:,1:end-2,1] .= B .* repeat(œµ[:, 1]', size(A,1))
    filter_decomposition[:,end-1,1] .= filter_decomposition[:,end,1] - sum(filter_decomposition[:,1:end-2,1],dims=2)

    for i in 2:size(data_in_deviations,2)
        filter_decomposition[:,1:end-2,i] .= A * filter_decomposition[:,1:end-2,i-1]
        filter_decomposition[:,1:end-2,i] .+= B .* repeat(œµ[:, i]', size(A,1))
        filter_decomposition[:,end-1,i] .= filter_decomposition[:,end,i] - sum(filter_decomposition[:,1:end-2,i],dims=2)
    end
    
    ŒºÃÑ = zeros(size(A,1), n_obs) # smoothed_states
    œÉÃÑ = zeros(size(A,1), n_obs) # smoothed_standard_deviations
    œµÃÑ = zeros(size(B,2), n_obs) # smoothed_shocks

    r = zeros(size(A,1))
    N = zeros(size(A,1), size(A,1))

    # Kalman Smoother
    for t in n_obs:-1:1
        r       .= C' * iF[:, :, t] * v[:, t] + L[:, :, t]' * r
        ŒºÃÑ[:, t] .= Œº[:, t] + P[:, :, t] * r
        N       .= C' * iF[:, :, t] * C + L[:, :, t]' * N * L[:, :, t]
        œÉÃÑ[:, t] .= sqrt.(abs.(‚Ñí.diag(P[:, :, t] - P[:, :, t] * N * P[:, :, t]'))) # can go negative
        œµÃÑ[:, t] .= B' * r
    end

    # Historical shock decompositionm (smoother)
    smooth_decomposition = zeros(size(A,1), size(B,2)+2, n_obs)

    smooth_decomposition[:,end,:] .= ŒºÃÑ
    smooth_decomposition[:,1:end-2,1] .= B .* repeat(œµÃÑ[:, 1]', size(A,1))
    smooth_decomposition[:,end-1,1] .= smooth_decomposition[:,end,1] - sum(smooth_decomposition[:,1:end-2,1],dims=2)

    for i in 2:size(data_in_deviations,2)
        smooth_decomposition[:,1:end-2,i] .= A * smooth_decomposition[:,1:end-2,i-1]
        smooth_decomposition[:,1:end-2,i] .+= B .* repeat(œµÃÑ[:, i]', size(A,1))
        smooth_decomposition[:,end-1,i] .= smooth_decomposition[:,end,i] - sum(smooth_decomposition[:,1:end-2,i],dims=2)
    end

    return ŒºÃÑ, œÉÃÑ, œµÃÑ, smooth_decomposition, Œº[:, 2:end], œÉ, œµ, filter_decomposition
end

end # dispatch_doctor